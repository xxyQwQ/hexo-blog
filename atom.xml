<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xxyQwQ</title>
  
  
  <link href="https://xxyqwq.github.io/atom.xml" rel="self"/>
  
  <link href="https://xxyqwq.github.io/"/>
  <updated>2024-02-16T09:46:18.000Z</updated>
  <id>https://xxyqwq.github.io/</id>
  
  <author>
    <name>xxyQwQ</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【文章】我的大三生活</title>
    <link href="https://xxyqwq.github.io/2024/02/14/junior-life/"/>
    <id>https://xxyqwq.github.io/2024/02/14/junior-life/</id>
    <published>2024-02-14T10:43:27.000Z</published>
    <updated>2024-02-16T09:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实验室实习"><a href="#实验室实习" class="headerlink" title="实验室实习"></a>实验室实习</h2><p>大二暑期的实验室实践课算是我第一次真正地参与实验室工作，由于专业课程还没有跟上，我对各个方向的了解也相当匮乏。根据一些道听途说的经验，我排除了已经相对完善的语音识别，过于内卷的计算机视觉，一夜之间被大模型颠覆的自然语言处理，选择了还不甚了解的强化学习。鉴于大家缺乏理论基础，老师安排我们以研讨会的形式学习David Silver的强化学习课程，剩余的时间再跟着学长开展工作。遗憾的是，学长给我分配的idea似乎很难奏效，当我确信这个idea缺乏创新性和实用性的时候，暑期实习已经接近尾声了，我在年底大致浏览了最新投稿的论文，也确实没有看到这方面的成果。现在想来，一个奏效的idea其实必须建立在自己深刻的理解之上，而非仅仅去尝试follow别人的工作，让缺乏指导经验的博士生带本科生其实也很不合理，无法实现循序渐进的有效培养。</p><p>一起实习的还有隔壁IEEE专业的卷王，他们申请了工位，每天泡在实验室里干活，甚至整个暑假都没有回家。这种勤奋给我留下了深刻的印象，也让我开始怀疑自己是否真的足够motivated，当然，我无法认同这种努力，我还是想给自己留出一段闲暇去陪一陪家人。相比那些忙于暑研的同学，我还是缺乏了一股狠劲，这也许就是我没能尽早产出论文的原因，然而在AI行业极度内卷的当下，即便有二作论文也未必会被认可。为了在申请留学时能够占据优势，每个人都急于在本科阶段发表顶会论文，崇尚潜心的学术变成了极尽功利的内卷，这恐怕是一种病态的追求。</p><h2 id="锐评专业课"><a href="#锐评专业课" class="headerlink" title="锐评专业课"></a>锐评专业课</h2><p>各种水课随着大三学年的到来烟消云散，只剩下几门核心专业课。《计算机视觉》和《自然语言处理》的授课以传统方法为主，而大作业却基于深度学习，难免有一些割裂感，但我仍能从经典算法中看到那个时代学者们理论的精妙和创新的智慧，感慨如今深度学习的如日中天和力大砖飞。IPADS实验室负责的《操作系统》则让我明显感受到课程设计的用心，从夏虞斌老师深入浅出的授课，到指导文档详实的实验作业，都为大家提供了极佳的学习体验，令人感叹不愧是世界顶尖的系统实验室。学术水平决定教学下限，思想态度决定教学上限，反观《生物信息学》，老师常年失踪，助教代理授课，一个研究生信的助教对着一群AI专业的学生讲机器学习，这种场景实在是有些好笑了。当然，作为一门水学分的课程，大家并不苛求能学到什么。《类脑智能》让我了解到脉冲神经网络和忆阻器计算的一些新方向，授课质量也算是中规中矩，而《人工智能前沿讲座》则是真正开拓眼界的一门课，能够在课堂上听到各路大佬分享学术见解和行业经验实在是弥足珍贵的，美中不足的是在时代的冲击下，讲座的主题清一色偏向于大语言模型，反而削减了领域的多样性。</p><h2 id="令人窒息的大作业"><a href="#令人窒息的大作业" class="headerlink" title="令人窒息的大作业"></a>令人窒息的大作业</h2><p>对于期末的大作业很多这件事，我是早有耳闻的，但唯有亲身经历才知道其中的艰辛。几乎所有的专业课都在期末布置了大作业，这本来无可厚非，但《计算机视觉》这种已经安排期末考试的课程也布置大作业实在是令人费解，有些大作业既要提交报告，又要上台答辩，严重增加了同学们的负担。这些大作业大多以小组合作的形式进行，但小组合作恰恰是最为低效的作业形式，一个超过两人的团队往往至少有一个人全程摸鱼，甚至绝大部分的任务都是由一名成员完成。这种形式在一定程度上利好懒惰不作为的人，但对于勤勤恳恳干活的人却是极不公平的。</p><p>考虑到既然大作业是考核的一部分，那就不妨做得完美一些，每篇报告都按照论文的格式来写，刚好可以锻炼自己学术写作的能力和熟练度。值得一提是《计算机视觉》的大作业，我们自选了一个手写汉字生成的任务，这个任务恰好可以利用《机器学习工程实践》中与AI换脸类似的框架来实现，我在原有的结构上稍作改进，很好地完成了这个任务。由于负责数据集处理和实验评估的同学都相当靠谱，这个难度最高的大作业反而完成得相当顺利，算是非常愉快的一次小组合作。当我完成所有六个大作业时，已经是第十八周的周末了，我以前从未在作业进度上如此狼狈。</p><h2 id="谈谈教育"><a href="#谈谈教育" class="headerlink" title="谈谈教育"></a>谈谈教育</h2><p>寒假期间，杜大佬在水源社区发了一篇帖子《交大本科就是个大型PUA修罗场》，引发了大家的共鸣，他在帖中写道：</p><blockquote><p>入学的时候，我起码是带着自信进校。开学典礼炫耀霸王课、挂科率、退学率，先给人当头一棒，除了恐吓人不知道能不能起到激励作用。你交讲“起点高，基础厚，要求严”传统，好像“我对你期望很高的，学不会都是你不努力”。通过各种“计划”、“试点班”筛选排名前X%，吃掉了所有的资源，让排名X%之后的同学觉得自己配不上交大，最终使得这些同学习惯了自己就是人下人，丧失了自信心和争取资源的主动性。当我以非前X%的成绩、没有任何“计划”、“试点班”帽子的状态毕业的时候，我觉得自己就配不上优秀，哪哪也比不上人。</p></blockquote><p>诚然，我们的本科教育早已畸形，它不是在培养人才，而是在筛选人才。交大的公众号三天两头地推送一些先进个人的故事，以唯成就论的视角歌颂刻板而单一的评价体系，而每个人自我实现的价值是不能被世俗的标准所定义的，那些不被聚光灯照耀的交大人也在默默地努力，更需要具有人文关怀的赞美。当室友着手准备托福考试的时候，我猛然感受到时间的飞逝，方才意识到自己也极大地受到了这一套评价体系的影响，过于在乎所谓的GPA，却忽视了更长远的规划。我似乎已经在这个泥潭中内卷了许久，是时候向下一个阶段进发了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;实验室实习&quot;&gt;&lt;a href=&quot;#实验室实习&quot; class=&quot;headerlink&quot; title=&quot;实验室实习&quot;&gt;&lt;/a&gt;实验室实习&lt;/h2&gt;&lt;p&gt;大二暑期的实验室实践课算是我第一次真正地参与实验室工作，由于专业课程还没有跟上，我对各个方向的了解也相当匮乏。根据一</summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="总结" scheme="https://xxyqwq.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【文章】快速搭建Windows终端开发环境</title>
    <link href="https://xxyqwq.github.io/2024/01/27/build-windows-terminal/"/>
    <id>https://xxyqwq.github.io/2024/01/27/build-windows-terminal/</id>
    <published>2024-01-27T02:43:22.000Z</published>
    <updated>2024-02-17T16:35:58.265Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装应用"><a href="#安装应用" class="headerlink" title="安装应用"></a>安装应用</h2><p>Windows 11 自带 Windows Terminal，如果使用 Windows 10 需要先在 Microsoft Store 手动安装</p><p>最新版本的 oh-my-posh 也可以直接通过 Microsoft Store 安装，注意下载可能需要代理</p><p><img src="/images/build-windows-terminal/download.png" style="zoom: 50%;" /></p><h2 id="配置字体"><a href="#配置字体" class="headerlink" title="配置字体"></a>配置字体</h2><p>我们首先需要安装 <a href="https://github.com/ryanoasis/nerd-fonts">Nerd Fonts</a> 以确保 oh-my-posh 中的字符和图标能够正常显示</p><p>各种字体可以直接在<a href="https://www.nerdfonts.com/font-downloads">官网</a>下载，这里我们选用 CaskaydiaCove Nerd Font 作为演示，下载并安装字体后打开 Windows Terminal，在设置中选择 Windows PowerShell 的配置文件，在外观中修改字体并保存即可</p><h2 id="修改执行策略"><a href="#修改执行策略" class="headerlink" title="修改执行策略"></a>修改执行策略</h2><p>此外，我们需要修改 Windows PowerShell 的执行策略，使得 oh-my-posh 能够正确执行，以管理员身份运行 Windows PowerShell 执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><p>然后根据提示，将执行策略修改为是或全是</p><h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><p>现在我们为 Windows PowerShell 创建配置文件，在每次启动时都对 oh-my-posh 进行初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ New-Item <span class="variable">$profile</span> -Value <span class="string">&quot;oh-my-posh init pwsh | Invoke-Expression&quot;</span> -Force</span><br></pre></td></tr></table></figure><p>重新打开 Windows Terminal，此时 oh-my-posh 已经可以正常启动</p><h2 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h2><p>接下来我们可以按需更换主题，以 Powerlevel10k 的 Rainbow Style 为例，首先执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Get-PoshThemes</span><br></pre></td></tr></table></figure><p>该命令会列出所有主题及其所在路径，根据提示我们可以定位到 <code>themes</code> 目录，将相应的主题文件复制到用户目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ Copy-Item <span class="string">&quot;C:\Users\xxyQwQ\AppData\Local\Programs\oh-my-posh\themes\powerlevel10k_rainbow.omp.json&quot;</span> -Destination <span class="string">&quot;C:\Users\xxyQwQ&quot;</span> -Force</span><br></pre></td></tr></table></figure><p>根据提示修改创建的配置文件，在启动时加载主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ code <span class="variable">$profile</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;C:\Users\xxyQwQ\powerlevel10k_rainbow.omp.json&quot;</span> | Invoke-Expression</span><br></pre></td></tr></table></figure><p>我们可以对主题文件进行定制化修改，例如添加 Anaconda 环境的显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ code <span class="string">&quot;C:\Users\xxyQwQ\powerlevel10k_rainbow.omp.json&quot;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;background&quot;</span>: <span class="string">&quot;#FFDE57&quot;</span>,</span><br><span class="line">    <span class="string">&quot;foreground&quot;</span>: <span class="string">&quot;#111111&quot;</span>,</span><br><span class="line">    <span class="string">&quot;invert_powerline&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;powerline_symbol&quot;</span>: <span class="string">&quot;\ue0b2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;fetch_virtual_env&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;fetch_version&quot;</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;style&quot;</span>: <span class="string">&quot;powerline&quot;</span>,</span><br><span class="line">    <span class="string">&quot;template&quot;</span>: <span class="string">&quot; &#123;&#123; if .Error &#125;&#125;&#123;&#123; .Error &#125;&#125;&#123;&#123; else &#125;&#125;&#123;&#123; if .Venv &#125;&#125;&#123;&#123; .Venv &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; end &#125;&#125; \ue235 &quot;</span>,</span><br><span class="line">    <span class="string">&quot;type&quot;</span>: <span class="string">&quot;python&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>保存并重启 Windows Terminal，此时主题已经加载成功</p><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>为了获得与 zsh 类似的使用体验，我们还需要额外安装一些模块，以管理员身份运行 Windows PowerShell 执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ Install-Module -Name PackageManagement -Repository PSGallery -Force</span><br><span class="line">$ Install-Module -Name PowerShellGet -Repository PSGallery -Force</span><br></pre></td></tr></table></figure><p>重启 Windows PowerShell，同样以管理员身份执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ Install-Module -Name PSReadLine -AllowPrerelease -Scope CurrentUser -Force -SkipPublisherCheck</span><br><span class="line">$ Install-Module -Name posh-git -AllowPrerelease -Scope CurrentUser -Force -SkipPublisherCheck</span><br></pre></td></tr></table></figure><p>模块安装完成后，在配置文件中添加如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ code <span class="variable">$profile</span></span><br><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module PSReadLine</span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line">Set-PSReadLineKeyHandler -Chord <span class="string">&quot;Ctrl+RightArrow&quot;</span> -Function ForwardWord</span><br></pre></td></tr></table></figure><p>保存并重启 Windows Terminal，此时模块已经加载成功，此外 oh-my-posh 可以根据输入历史补全命令，使用 Ctrl+RightArrow 可以补全单词</p><h2 id="个性化设置"><a href="#个性化设置" class="headerlink" title="个性化设置"></a>个性化设置</h2><p>此外，我们也可以在配置文件中添加命令以支持更多个性化设置，例如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-Alias ll <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>从而使得 oh-my-posh 更加符合 Linux 用户的使用习惯，一个完整的配置文件示例如下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ code <span class="variable">$profile</span></span><br><span class="line">oh-my-posh init pwsh --config <span class="string">&quot;C:\Users\xxyQwQ\powerlevel10k_rainbow.omp.json&quot;</span> | Invoke-Expression</span><br><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module PSReadLine</span><br><span class="line">Set-PSReadLineOption -PredictionSource History</span><br><span class="line">Set-PSReadLineKeyHandler -Chord <span class="string">&quot;Ctrl+RightArrow&quot;</span> -Function ForwardWord</span><br><span class="line">Set-Alias ll <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><h2 id="配置-VSCode-终端"><a href="#配置-VSCode-终端" class="headerlink" title="配置 VSCode 终端"></a>配置 VSCode 终端</h2><p>最后，我们在 VSCode 中将默认配置文件改为 Windows PowerShell，并将终端字体改为 ‘CaskaydiaCove Nerd Font Mono’</p><p>至此，我们已经可以在 VSCode 中正常使用 oh-my-posh 作为终端</p><p><img src="/images/build-windows-terminal/showcase.png" style="zoom: 50%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装应用&quot;&gt;&lt;a href=&quot;#安装应用&quot; class=&quot;headerlink&quot; title=&quot;安装应用&quot;&gt;&lt;/a&gt;安装应用&lt;/h2&gt;&lt;p&gt;Windows 11 自带 Windows Terminal，如果使用 Windows 10 需要先在 Microsoft </summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="记录" scheme="https://xxyqwq.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【文章】快速搭建Linux终端开发环境</title>
    <link href="https://xxyqwq.github.io/2023/07/31/build-linux-terminal/"/>
    <id>https://xxyqwq.github.io/2023/07/31/build-linux-terminal/</id>
    <published>2023-07-31T07:45:34.000Z</published>
    <updated>2023-07-31T11:34:53.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p><code>VSCode</code>推出<code>Remote SSH</code>插件以后，远程开发变得简单，原生的开发环境大大提高了工作效率，但各种复杂的系统交互仍然需要回归终端。趁着近期有空折腾，笔者搜集各种资料，基于<code>zsh</code>+<code>oh-my-zsh</code>+<code>tmux</code>+<code>oh-my-tmux</code>搭建了一个相对令人满意的终端环境，本文用于整理搭建过程，构建一份搭建指南，以便日后读者参考</p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li><code>Linux</code>操作系统（笔者使用<code>Ubuntu 20.04</code>，其他版本可能略有差异）</li><li>用户具有<code>sudo</code>权限（安装依赖）</li><li>一些基本的工具（例如<code>curl</code>、<code>git</code>等）</li><li><strong>科学</strong>的网络环境（请自行配置代理工具）</li></ul><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><h3 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h3><p>使用<code>apt</code>直接安装<code>zsh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install zsh</span><br></pre></td></tr></table></figure><p>检查<code>zsh</code>可用性</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> /etc/shells</span><br><span class="line"><span class="comment"># /etc/shells: valid login shells</span></span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure><h3 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h3><p>使用<code>curl</code>安装<code>oh-my-zsh</code>，这里同样可以使用<code>wget</code>，具体参考<a href="https://ohmyz.sh/">官网</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>修改默认<code>shell</code>为<code>zsh</code>，然后重新登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>检查默认<code>shell</code>是否已经正确修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果使用<code>VSCode</code>进行远程开发，需要额外进行以下操作</p><ul><li>在命令面板（<code>Ctrl</code>+<code>Shift</code>+<code>P</code>）中关闭服务器上的<code>vscode-server</code>进程</li><li>进入配置终端设置，将该服务器的默认终端修改为<code>zsh</code></li></ul><p>此处笔者使用<code>agnoster</code>主题，在<code>~/.zshrc</code>中修改配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br><span class="line">ZSH_THEME=<span class="string">&quot;agnoster&quot;</span></span><br></pre></td></tr></table></figure><p>从<code>Github</code>安装<code>zsh-autosuggestions</code>和<code>zsh-syntax-highlighting</code>插件，并在<code>~/.zshrc</code>中启用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-syntax-highlighting</span><br><span class="line">$ vim ~/.zshrc</span><br><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><p>使用<code>apt</code>直接安装<code>tmux</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install tmux</span><br></pre></td></tr></table></figure><p>如果系统自带<code>tmux</code>，重启即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tmux kill-server</span><br></pre></td></tr></table></figure><h3 id="oh-my-tmux"><a href="#oh-my-tmux" class="headerlink" title="oh-my-tmux"></a>oh-my-tmux</h3><p>从<code>Github</code>安装<code>oh-my-tmux</code>，这里笔者使用自己配置的版本，同样可以直接使用<a href="https://github.com/gpakosz/.tmux">原版</a>，除了下载地址不同以外，安装过程完全相同</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/xxyQwQ/.tmux</span><br><span class="line">$ <span class="built_in">ln</span> -sf .tmux/.tmux.conf</span><br><span class="line">$ <span class="built_in">cp</span> .tmux/.tmux.conf.local .</span><br></pre></td></tr></table></figure><h2 id="其他事项"><a href="#其他事项" class="headerlink" title="其他事项"></a>其他事项</h2><h3 id="迁移bash配置"><a href="#迁移bash配置" class="headerlink" title="迁移bash配置"></a>迁移bash配置</h3><p>如果之前在<code>.bashrc</code>中进行了一些配置，可以将这些内容直接复制到<code>.zshrc</code>中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br><span class="line"><span class="comment"># proxy setting</span></span><br><span class="line"><span class="keyword">if</span> [ -f /etc/profile.d/clash.sh ]; <span class="keyword">then</span></span><br><span class="line">    . /etc/profile.d/clash.sh</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="关于Anaconda"><a href="#关于Anaconda" class="headerlink" title="关于Anaconda"></a>关于Anaconda</h3><p>如果使用<code>Anaconda</code>，建议关闭自动激活，否则在启动<code>tmux</code>时<code>PATH</code>变量可能错误加载，导致虚拟环境无法正常使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.condarc</span><br><span class="line">auto_activate_base: <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="改进外观"><a href="#改进外观" class="headerlink" title="改进外观"></a>改进外观</h3><p>笔者配置时注意到<code>zsh</code>和<code>tmux</code>中显示的主机名可能很长，可以通过修改配置文件的方式隐藏它们</p><p>对于<code>oh-my-zsh</code>，在<code>agnoster.zsh-theme</code>中做如下修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.oh-my-zsh/themes/agnoster.zsh-theme</span><br><span class="line"><span class="function"><span class="title">prompt_context</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$USERNAME</span>&quot;</span> != <span class="string">&quot;<span class="variable">$DEFAULT_USER</span>&quot;</span> || -n <span class="string">&quot;<span class="variable">$SSH_CLIENT</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    prompt_segment black default <span class="string">&quot;%(!.%&#123;%F&#123;yellow&#125;%&#125;.)%n&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于<code>oh-my-tmux</code>，在<code>~/.tmux.conf.local</code>中做如下修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.tmux.conf.local</span><br><span class="line">tmux_conf_theme_status_right=<span class="string">&quot; #&#123;prefix&#125;#&#123;mouse&#125;#&#123;pairing&#125;#&#123;synchronized&#125;#&#123;?battery_status,#&#123;battery_status&#125;,&#125;#&#123;?battery_bar, #&#123;battery_bar&#125;,&#125;#&#123;?battery_percentage, #&#123;battery_percentage&#125;,&#125; , %R , %d %b | #&#123;username&#125;#&#123;root&#125; &quot;</span></span><br></pre></td></tr></table></figure><p>至此，终端环境已经搭建完成，效果展示如下</p><p><img src="/images/build-linux-terminal/showcase.png" style="zoom: 50%;" /></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;&lt;code&gt;VSCode&lt;/code&gt;推出&lt;code&gt;Remote SSH&lt;/code&gt;插件以后，远程开发变得简单，原生的开</summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="记录" scheme="https://xxyqwq.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【文章】从零开始实现支持向量机</title>
    <link href="https://xxyqwq.github.io/2023/06/20/support-vector-machine/"/>
    <id>https://xxyqwq.github.io/2023/06/20/support-vector-machine/</id>
    <published>2023-06-20T12:22:29.000Z</published>
    <updated>2023-06-20T16:31:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>这篇文章诞生于机器学习课程无聊的大作业，既然已经为此浪费了不少时间，不妨再多花点时间写一篇文章，借此记录一下实现过程。支持向量机的数学形式简约而直观，但一旦涉及具体实现，各种问题就会接踵而来。在本文中，笔者将首先推导SVM的主要公式，接着基于Platt-SMO算法，从零开始实现支持多种核函数的SVM，然后基于One-Versus-One策略实现多分类，最后在MNIST和CIFAR-10数据集上进行性能测试</p><h2 id="数学推导"><a href="#数学推导" class="headerlink" title="数学推导"></a>数学推导</h2><h3 id="基本形式"><a href="#基本形式" class="headerlink" title="基本形式"></a>基本形式</h3><p>给定一个训练集 $\mathcal{D} = \{(\boldsymbol{x}_i, y_i)\}_{i=1}^m$，其中 $\boldsymbol{x}_i \in \mathbb{R}^n$ 是特征向量，$y_i \in \{+1, -1\}$ 是标签。线性SVM期望找到一个超平面 $\boldsymbol{w}^T \boldsymbol{x} + b = 0$，将正样本和负样本分开，其中 $\boldsymbol{w} \in \mathbb{R}^n$ 是法向量，$b \in \mathbb{R}$ 是偏移量</p><p><img src="/images/support-vector-machine/SVM.jpg" style="zoom: 20%;" /></p><p>对于任一样本 $\boldsymbol{x}_i$，其到超平面的距离为</p><script type="math/tex; mode=display">r_i = \frac{|\boldsymbol{w}^T \boldsymbol{x}_i + b|}{\left\|\boldsymbol{w}\right\|}</script><p>假定该超平面能将正负样本完全分开，即对于任一样本 $\boldsymbol{x}_i$有</p><script type="math/tex; mode=display">\left\{\begin{aligned}    &\boldsymbol{w}^T \boldsymbol{x}_i + b \geq +1, &y_i = +1 \\    &\boldsymbol{w}^T \boldsymbol{x}_i + b \leq -1, &y_i = -1\end{aligned}\right.</script><p>注意到有一些样本满足 $\boldsymbol{w}^T \boldsymbol{x}_i + b = \pm 1$，它们被称为支持向量。支持向量到超平面的距离被称为间隔，记为</p><script type="math/tex; mode=display">r = \frac{1}{\left\|\boldsymbol{w}\right\|}</script><p>我们的目标是最大化间隔，即最小化 $\left|\boldsymbol{w}\right|$。因此，优化问题可以表述为</p><script type="math/tex; mode=display">\begin{aligned}&\min_{\boldsymbol{w}, b} \quad \frac{1}{2} \left\|\boldsymbol{w}\right\|^2 \\&\text{s.t.} \quad y_i (\boldsymbol{w}^T \boldsymbol{x}_i + b) \geq 1, \quad i = 1, 2, \dots, m\end{aligned}</script><p>然而，这些样本并不总是线性可分的，因此我们引入Hinge损失函数</p><script type="math/tex; mode=display">\ell_{\text{hinge}}(z) = \max\left\{0, 1 - z\right\}</script><p>于是，优化问题可以表述为</p><script type="math/tex; mode=display">\begin{aligned}&\min_{\boldsymbol{w}, b} \quad \frac{1}{2} \left\|\boldsymbol{w}\right\|^2 + C \sum_{i=1}^m \ell_{\text{hinge}}[y_i (\boldsymbol{w}^T \boldsymbol{x}_i + b)] \\&\text{s.t.} \quad \xi_i \geq 0, \quad i = 1, 2, \dots, m\end{aligned}</script><p>如果我们引入松弛变量 $\xi_i \geq 0$，优化问题可以改写为</p><script type="math/tex; mode=display">\begin{aligned}&\min_{\boldsymbol{w}, b} \quad \frac{1}{2} \left\|\boldsymbol{w}\right\|^2 + C \sum_{i=1}^m \xi_i \\&\text{s.t.} \quad y_i (\boldsymbol{w}^T \boldsymbol{x}_i + b) \geq 1 - \xi_i, \quad i = 1, 2, \dots, m\end{aligned}</script><p>为了构造对偶问题，我们引入拉格朗日乘子 $\alpha_i \geq 0$ 和 $\mu_i \geq 0$，拉格朗日函数定义为</p><script type="math/tex; mode=display">\mathcal{L}(\boldsymbol{w}, b, \boldsymbol{\xi}, \boldsymbol{\alpha}, \boldsymbol{\mu}) = \frac{1}{2} \left\|\boldsymbol{w}\right\|^2 + C \sum_{i=1}^m \xi_i - \sum_{i=1}^m \alpha_i [y_i (\boldsymbol{w}^T \boldsymbol{x}_i + b) - 1 + \xi_i] - \sum_{i=1}^m \mu_i \xi_i</script><p>令 $\mathcal{L}$ 对 $\boldsymbol{w}$，$b$ 和 $\xi_i$ 的偏导数为零，可得</p><script type="math/tex; mode=display">\begin{aligned}\frac{\partial \mathcal{L}}{\partial \boldsymbol{w}} &= \boldsymbol{w} - \sum_{i=1}^m \alpha_i y_i \boldsymbol{x}_i = 0 \\\frac{\partial \mathcal{L}}{\partial b} &= -\sum_{i=1}^m \alpha_i y_i = 0 \\\frac{\partial \mathcal{L}}{\partial \xi_i} &= C - \alpha_i - \mu_i = 0\end{aligned}</script><p>因此，对偶问题可以表述为</p><script type="math/tex; mode=display">\begin{aligned}&\max_{\boldsymbol{\alpha}} \quad \sum_{i=1}^m \alpha_i - \frac{1}{2} \sum_{i=1}^m \sum_{j=1}^m \alpha_i \alpha_j y_i y_j \boldsymbol{x}_i^T \boldsymbol{x}_j \\&\text{s.t.} \quad \sum_{i=1}^m \alpha_i y_i = 0 \\&\quad \quad 0 \leq \alpha_i \leq C, \quad i = 1, 2, \dots, m\end{aligned}</script><p>这是一个二次规划问题，我们可以采用梯度下降或者坐标下降等方法求解。</p><h3 id="核函数与核技巧"><a href="#核函数与核技巧" class="headerlink" title="核函数与核技巧"></a>核函数与核技巧</h3><p>有时候这些样本并不是线性可分的，但是我们可以将它们映射到高维空间，使得它们在高维空间中线性可分。假定映射函数为 $\phi$，则样本 $\boldsymbol{x}_i$ 被映射到 $\phi(\boldsymbol{x}_i)$。我们可以将对偶问题改写为</p><script type="math/tex; mode=display">\begin{aligned}&\max_{\boldsymbol{\alpha}} \quad \sum_{i=1}^m \alpha_i - \frac{1}{2} \sum_{i=1}^m \sum_{j=1}^m \alpha_i \alpha_j y_i y_j \phi(\boldsymbol{x}_i)^T \phi(\boldsymbol{x}_j) \\&\text{s.t.} \quad \sum_{i=1}^m \alpha_i y_i = 0 \\&\quad \quad 0 \leq \alpha_i \leq C, \quad i = 1, 2, \dots, m\end{aligned}</script><p>有趣的是，我们并不需要显式地计算 $\phi(\boldsymbol{x}_i)$，而是通过核函数 $K(\boldsymbol{x}_i, \boldsymbol{x}_j) = \phi(\boldsymbol{x}_i)^T \phi(\boldsymbol{x}_j)$ 来计算内积，因此对偶问题可以改写为</p><script type="math/tex; mode=display">\begin{aligned}&\max_{\boldsymbol{\alpha}} \quad \sum_{i=1}^m \alpha_i - \frac{1}{2} \sum_{i=1}^m \sum_{j=1}^m \alpha_i \alpha_j y_i y_j K(\boldsymbol{x}_i, \boldsymbol{x}_j) \\&\text{s.t.} \quad \sum_{i=1}^m \alpha_i y_i = 0 \\&\quad \quad 0 \leq \alpha_i \leq C, \quad i = 1, 2, \dots, m\end{aligned}</script><p>这种方法也称为核技巧（Kernel Trick），下面我们给出几种常用的核函数</p><div class="table-container"><table><thead><tr><th style="text-align:center">核函数</th><th style="text-align:center">$\kappa(\boldsymbol{x}_i, \boldsymbol{x}_j)$</th></tr></thead><tbody><tr><td style="text-align:center">线性核</td><td style="text-align:center">$\boldsymbol{x}_i^T \boldsymbol{x}_j$</td></tr><tr><td style="text-align:center">多项式核</td><td style="text-align:center">$(\gamma \boldsymbol{x}_i^T \boldsymbol{x}_j + r)^d$</td></tr><tr><td style="text-align:center">高斯核</td><td style="text-align:center">$\exp(-\gamma \vert\boldsymbol{x}_i - \boldsymbol{x}_j\vert^2)$</td></tr><tr><td style="text-align:center">Sigmoid核</td><td style="text-align:center">$\tanh(\gamma \boldsymbol{x}_i^T \boldsymbol{x}_j + r)$</td></tr></tbody></table></div><h3 id="Platt-SMO算法"><a href="#Platt-SMO算法" class="headerlink" title="Platt-SMO算法"></a>Platt-SMO算法</h3><p>Platt-SMO算法来源于坐标下降法，每次只尝试优化一个变量。由于对偶问题中存在约束，我们每次需要优化两个变量。假设我们选择 $\alpha_1$ 和 $\alpha_2$ 来优化，固定其他变量，优化问题可以表述为</p><script type="math/tex; mode=display">\begin{aligned}    \max_{\alpha_1, \alpha_2} \quad &\alpha_1 + \alpha_2 - \alpha_1 \alpha_2 y_1 y_2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2) \\    &- \frac{1}{2} \alpha_1^2 y_1^2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) - \frac{1}{2} \alpha_2^2 y_2^2 \kappa(\boldsymbol{x}_2, \boldsymbol{x}_2) \\    &- \alpha_1 y_1 \sum_{i=3}^m \alpha_i y_i \kappa(\boldsymbol{x}_1, \boldsymbol{x}_i) - \alpha_2 y_2 \sum_{i=3}^m \alpha_i y_i \kappa(\boldsymbol{x}_2, \boldsymbol{x}_i) \\    \text{s.t.} \quad &\alpha_1 y_1 + \alpha_2 y_2 = -\sum_{i=3}^m \alpha_i y_i = \zeta \\    &0 \leq \alpha_1 \leq C, \quad 0 \leq \alpha_2 \leq C\end{aligned}</script><p>其中 $\zeta$ 是一个常数，我们可以将 $\alpha_1$ 表示为</p><script type="math/tex; mode=display">\alpha_1 = \zeta y_1 - \alpha_2 y_1 y_2</script><p>决策函数可以表示为</p><script type="math/tex; mode=display">f(\boldsymbol{x})=\sum_{i=1}^m \alpha_i y_i \kappa(\boldsymbol{x}_i, \boldsymbol{x}) + b</script><p>令 $E_i=f(\boldsymbol{x}_i)-y_i$ 表示预测值与真实值之间的误差。定义辅助变量 $v_1$ 和 $v_2$ 为</p><script type="math/tex; mode=display">\begin{aligned}    v_1&=\sum \limits_{i=3}^m \alpha_i y_i \kappa(\boldsymbol{x}_1, \boldsymbol{x}_i) \\    &=f(\boldsymbol{x}_1) - b - \alpha_1 y_1 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) - \alpha_2 y_2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2) \\    v_2&=\sum \limits_{i=3}^m \alpha_i y_i \kappa(\boldsymbol{x}_2, \boldsymbol{x}_i) \\    &=f(\boldsymbol{x}_2) - b - \alpha_1 y_1 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2) - \alpha_2 y_2 \kappa(\boldsymbol{x}_2, \boldsymbol{x}_2)\end{aligned}</script><p>于是目标函数可以写成</p><script type="math/tex; mode=display">\begin{aligned}    \mathcal{L}(\alpha_2) &= -\alpha_2 (\zeta - \alpha_2 y_2) y_2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2) \\    &- \frac{1}{2} (\zeta - \alpha_2 y_2)^2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) - \frac{1}{2} \alpha_2^2 \kappa(\boldsymbol{x}_2, \boldsymbol{x}_2) \\    &-(\zeta - \alpha_2 y_2) v_1 - \alpha_2 y_2 v_2 + (1 - y_1 y_2) \alpha_2\end{aligned}</script><p>令 $\mathcal{L}$ 对 $\alpha_2$ 的偏导数为零，可得</p><script type="math/tex; mode=display">\begin{aligned}    \frac{\partial \mathcal{L}}{\partial \alpha_2} &= -(\kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) + \kappa(\boldsymbol{x}_2, \boldsymbol{x}_2) - 2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2)) \alpha_2 \\    &+ y_2 \zeta (\kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) - \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2)) \\    &+ (v_1 - v_2) y_2 - y_1 y_2 + y_2^2 = 0\end{aligned}</script><p>令 $\eta = \kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) + \kappa(\boldsymbol{x}_2, \boldsymbol{x}_2) - 2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2)$，注意到</p><script type="math/tex; mode=display">v_1 - v_2 = f(\boldsymbol{x}_1) - f(\boldsymbol{x}_2) + \alpha_2 y_2 \eta - \zeta (\kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) - \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2))</script><p>于是有</p><script type="math/tex; mode=display">\frac{\partial \mathcal{L}}{\partial \alpha_2} = -\eta \alpha_2^* + \eta \alpha_2 + y_2 (E_1 - E_2) = 0</script><p>因此</p><script type="math/tex; mode=display">\alpha_2^* = \alpha_2 + \frac{y_2 (E_1 - E_2)}{\eta}</script><p>由于存在约束条件 $0 \leq \alpha_1,\alpha_2 \leq C$，因此需要对 $\alpha_2^*$ 进行修剪</p><script type="math/tex; mode=display">\alpha'_2 = \left\{ \begin{aligned}    &L, &\alpha_2^* < L \\    &\alpha_2^*, &L \leq \alpha_2^* \leq H \\    &H, &\alpha_2^* > H \\\end{aligned} \right.</script><p>其中</p><script type="math/tex; mode=display">\begin{aligned}    L &= \left\{ \begin{aligned}        &\max \{0, \alpha_2 + \alpha_1 - C\}, &y_1=y_2 \\        &\max \{0, \alpha_2 - \alpha_1\}, &y_1 \neq y_2 \\    \end{aligned} \right. \\    H &= \left\{ \begin{aligned}        &\min \{C, \alpha_2 + \alpha_1\}, &y_1=y_2 \\        &\min \{C, C + \alpha_2 - \alpha_1\}, &y_1 \neq y_2 \\    \end{aligned} \right.\end{aligned}</script><p>于是 $\alpha_1$ 可以通过 $\alpha_2$ 来计算</p><script type="math/tex; mode=display">\alpha'_1 = \alpha_1 + y_1 y_2 (\alpha_2 - \alpha'_2)</script><p>如果 $0 &lt; \alpha_i &lt; C$，则 $\boldsymbol{x}_i$ 是支持向量，辅助变量 $b_1$ 和 $b_2$ 定义为</p><script type="math/tex; mode=display">\begin{aligned}    b_1 &= b - E_1 - y_1 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_1) (\alpha'_1 - \alpha_1) - y_2 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2) (\alpha'_2 - \alpha_2) \\    b_2 &= b - E_2 - y_1 \kappa(\boldsymbol{x}_1, \boldsymbol{x}_2) (\alpha'_1 - \alpha_1) - y_2 \kappa(\boldsymbol{x}_2, \boldsymbol{x}_2) (\alpha'_2 - \alpha_2)\end{aligned}</script><p>因此，偏移量 $b$ 的更新规则为</p><script type="math/tex; mode=display">b = \left\{ \begin{aligned}    &b_1, &0 < \alpha'_1 < C \\    &b_2, &0 < \alpha'_2 < C \\    &\frac{b_1 + b_2}{2}, &\text{otherwise}\end{aligned} \right.</script><p>现在我们已经得到了单次迭代中所有参数的更新公式，我们只需要反复地选择一对 $\alpha_i$ 和 $\alpha_j$ 进行更新，直到收敛为止</p><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><h3 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h3><p>我们对上述四种核函数进行实现，这里将核函数封装成类，通过实现<code>__call__</code>方法，使其实例可以像函数一样被调用</p><ol><li><p>线性核</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LinearKernel</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&#x27;linear&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        <span class="keyword">return</span> X @ y.T</span><br></pre></td></tr></table></figure></li><li><p>多项式核</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PolynomialKernel</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gamma=<span class="number">1.0</span>, degree=<span class="number">3</span></span>):</span><br><span class="line">        self.name = <span class="string">&#x27;polynomial&#x27;</span></span><br><span class="line">        self.gamma = gamma</span><br><span class="line">        self.degree = degree</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        <span class="keyword">return</span> np.power(self.gamma * (X @ y.T) + <span class="number">1</span>, self.degree)</span><br></pre></td></tr></table></figure></li><li><p>高斯核</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GaussianKernel</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gamma=<span class="number">1.0</span></span>):</span><br><span class="line">        self.name = <span class="string">&#x27;gaussian&#x27;</span></span><br><span class="line">        self.gamma = gamma</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        <span class="keyword">return</span> np.exp(-self.gamma * np.<span class="built_in">sum</span>(np.square(X - y), axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure></li><li><p>Sigmod核</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SigmoidKernel</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, gamma=<span class="number">1.0</span>, bias=<span class="number">0.0</span></span>):</span><br><span class="line">        self.name = <span class="string">&#x27;sigmoid&#x27;</span></span><br><span class="line">        self.gamma = gamma</span><br><span class="line">        self.bias = bias</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__call__</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        <span class="keyword">return</span> np.tanh(self.gamma * (X @ y.T) + self.bias)</span><br></pre></td></tr></table></figure></li></ol><p>另外，我们定义一个工具函数，方便核函数的创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">CreateKernel</span>(<span class="params">entry</span>):</span><br><span class="line">    <span class="keyword">if</span> entry[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;linear&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> LinearKernel()</span><br><span class="line">    <span class="keyword">elif</span> entry[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;polynomial&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> PolynomialKernel(entry[<span class="string">&#x27;gamma&#x27;</span>], entry[<span class="string">&#x27;degree&#x27;</span>])</span><br><span class="line">    <span class="keyword">elif</span> entry[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;gaussian&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> GaussianKernel(entry[<span class="string">&#x27;gamma&#x27;</span>])</span><br><span class="line">    <span class="keyword">elif</span> entry[<span class="string">&#x27;name&#x27;</span>] == <span class="string">&#x27;sigmoid&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> SigmoidKernel(entry[<span class="string">&#x27;gamma&#x27;</span>], entry[<span class="string">&#x27;bias&#x27;</span>])</span><br><span class="line">    <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;invalid kernel&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h3><p>参考<code>scikit-learn</code>的封装，我们定义一个类，提供<code>fit</code>和<code>predict</code>两种方法，参数包括最大迭代次数、惩罚系数、误差精度和核函数类型，利用私有函数实现 $\alpha_i$ 和 $\alpha_j$ 的选择和单步更新，对于线性核，我们提供<code>weight</code>属性，用于获取线性核的分类超平面参数，除了一些简化以外，代码基本按照Platt-SMO算法进行实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SupportVectorMachine</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iteration=<span class="number">100</span>, penalty=<span class="number">1.0</span>, epsilon=<span class="number">1e-6</span>, kernel=<span class="literal">None</span></span>):</span><br><span class="line">        self.iteration = iteration</span><br><span class="line">        self.penalty = penalty</span><br><span class="line">        self.epsilon = epsilon</span><br><span class="line">        <span class="keyword">if</span> kernel <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            kernel = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;linear&#x27;</span>&#125;</span><br><span class="line">        self.kernel = CreateKernel(kernel)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__compute_w</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.a * self.y) @ self.X</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__compute_e</span>(<span class="params">self, i</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.a * self.y) @ self.K[:, i] + self.b - self.y[i]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__select_j</span>(<span class="params">self, i</span>):</span><br><span class="line">        j = np.random.randint(<span class="number">1</span>, self.m)</span><br><span class="line">        <span class="keyword">return</span> j <span class="keyword">if</span> j &gt; i <span class="keyword">else</span> j - <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__step_forward</span>(<span class="params">self, i</span>):</span><br><span class="line">        e_i = self.__compute_e(i)</span><br><span class="line">        <span class="keyword">if</span> ((self.a[i] &gt; <span class="number">0</span>) <span class="keyword">and</span> (e_i * self.y[i] &gt; self.epsilon)) <span class="keyword">or</span> ((self.a[i] &lt; self.penalty) <span class="keyword">and</span> (e_i * self.y[i] &lt; -self.epsilon)):</span><br><span class="line">            j = self.__select_j(i)</span><br><span class="line">            e_j = self.__compute_e(j)</span><br><span class="line">            a_i, a_j = np.copy(self.a[i]), np.copy(self.a[j])</span><br><span class="line">            <span class="keyword">if</span> self.y[i] == self.y[j]:</span><br><span class="line">                L = <span class="built_in">max</span>(<span class="number">0</span>, a_i + a_j - self.penalty)</span><br><span class="line">                H = <span class="built_in">min</span>(self.penalty, a_i + a_j)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                L = <span class="built_in">max</span>(<span class="number">0</span>, a_j - a_i)</span><br><span class="line">                H = <span class="built_in">min</span>(self.penalty, self.penalty + a_j - a_i)</span><br><span class="line">            <span class="keyword">if</span> L == H:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            d = <span class="number">2</span> * self.K[i, j] - self.K[i, i] - self.K[j, j]</span><br><span class="line">            <span class="keyword">if</span> d &gt;= <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            self.a[j] = np.clip(a_j - self.y[j] * (e_i - e_j) / d, L, H)</span><br><span class="line">            <span class="keyword">if</span> np.<span class="built_in">abs</span>(self.a[j] - a_j) &lt; self.epsilon:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            self.a[i] = a_i + self.y[i] * self.y[j] * (a_j - self.a[j])</span><br><span class="line">            b_i = self.b - e_i - self.y[i] * self.K[i, i] * (self.a[i] - a_i) - self.y[j] * self.K[j, i] * (self.a[j] - a_j)</span><br><span class="line">            b_j = self.b - e_j - self.y[i] * self.K[i, j] * (self.a[i] - a_i) - self.y[j] * self.K[j, j] * (self.a[j] - a_j)</span><br><span class="line">            <span class="keyword">if</span> <span class="number">0</span> &lt; self.a[i] &lt; self.penalty:</span><br><span class="line">                self.b = b_i</span><br><span class="line">            <span class="keyword">elif</span> <span class="number">0</span> &lt; self.a[j] &lt; self.penalty:</span><br><span class="line">                self.b = b_j</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.b = (b_i + b_j) / <span class="number">2</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">setup</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        self.X, self.y = X, y</span><br><span class="line">        self.m, self.n = X.shape</span><br><span class="line">        self.b = <span class="number">0.0</span></span><br><span class="line">        self.a = np.zeros(self.m)</span><br><span class="line">        self.K = np.zeros((self.m, self.m))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.m):</span><br><span class="line">            self.K[:, i] = self.kernel(X, X[i, :])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        self.setup(X, y)</span><br><span class="line">        entire = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(self.iteration):</span><br><span class="line">            change = <span class="number">0</span></span><br><span class="line">            <span class="keyword">if</span> entire:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(self.m):</span><br><span class="line">                    change += self.__step_forward(i)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = np.nonzero((<span class="number">0</span> &lt; self.a) * (self.a &lt; self.penalty))[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> index:</span><br><span class="line">                    change += self.__step_forward(i)</span><br><span class="line">            <span class="keyword">if</span> entire:</span><br><span class="line">                entire = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> change == <span class="number">0</span>:</span><br><span class="line">                entire = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, X</span>):</span><br><span class="line">        m = X.shape[<span class="number">0</span>]</span><br><span class="line">        y = np.zeros(m)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">            y[i] = np.sign((self.a * self.y) @ self.kernel(self.X, X[i, :]) + self.b)</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weight</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> self.kernel.name != <span class="string">&#x27;linear&#x27;</span>:</span><br><span class="line">            <span class="keyword">raise</span> AttributeError(<span class="string">&#x27;non-linear kernel&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self.__compute_w(), self.b</span><br></pre></td></tr></table></figure><h3 id="多分类"><a href="#多分类" class="headerlink" title="多分类"></a>多分类</h3><p>基于One-Versus-One策略，我们构造 $C_k^2$ 个SVM，其中 $k$ 为类别数，训练每个分类器时，选取相应类别的样本作为训练集，并将标签映射到 $-1$ 和 $1$，在预测时，用每个分类器的预测结果进行投票，从而得到最终结果</p><p>我们采用与支持向量机完全相同的封装，提供<code>fit</code>和<code>predict</code>两种方法，使该类成为通用的分类模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SupportVectorClassifier</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, iteration=<span class="number">100</span>, penalty=<span class="number">1.0</span>, epsilon=<span class="number">1e-6</span>, kernel=<span class="literal">None</span></span>):</span><br><span class="line">        self.iteration = iteration</span><br><span class="line">        self.penalty = penalty</span><br><span class="line">        self.epsilon = epsilon</span><br><span class="line">        self.kernel = kernel</span><br><span class="line">        self.classifier = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__build_model</span>(<span class="params">self, y</span>):</span><br><span class="line">        self.label = np.unique(y)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.label)):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(self.label)):</span><br><span class="line">                model = SupportVectorMachine(self.iteration, self.penalty, self.epsilon, self.kernel)</span><br><span class="line">                self.classifier.append((i, j, model))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fit</span>(<span class="params">self, X, y</span>):</span><br><span class="line">        self.__build_model(y)</span><br><span class="line">        <span class="keyword">for</span> i, j, model <span class="keyword">in</span> tqdm(self.classifier):</span><br><span class="line">            index = np.where((y == self.label[i]) | (y == self.label[j]))[<span class="number">0</span>]</span><br><span class="line">            X_ij, y_ij = X[index], np.where(y[index] == self.label[i], -<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">            model.fit(X_ij, y_ij)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">predict</span>(<span class="params">self, X</span>):</span><br><span class="line">        vote = np.zeros((X.shape[<span class="number">0</span>], <span class="built_in">len</span>(self.label)))</span><br><span class="line">        <span class="keyword">for</span> i, j, model <span class="keyword">in</span> tqdm(self.classifier):</span><br><span class="line">            y = model.predict(X)</span><br><span class="line">            vote[np.where(y == -<span class="number">1</span>)[<span class="number">0</span>], i] += <span class="number">1</span></span><br><span class="line">            vote[np.where(y == <span class="number">1</span>)[<span class="number">0</span>], j] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.label[np.argmax(vote, axis=<span class="number">1</span>)]</span><br></pre></td></tr></table></figure><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><p>首先，我们在二维平面上构造两组简单的正态分布数据，用于可视化支持向量机的分类效果，首先构造数据并训练模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">X = np.concatenate((np.random.randn(<span class="number">500</span>, <span class="number">2</span>) - <span class="number">2</span>, np.random.randn(<span class="number">500</span>, <span class="number">2</span>) + <span class="number">2</span>))</span><br><span class="line">y = np.concatenate((np.ones(<span class="number">500</span>), -np.ones(<span class="number">500</span>)))</span><br><span class="line">C = SupportVectorMachine(iteration=<span class="number">100</span>)</span><br><span class="line">C.fit(X, y)</span><br><span class="line">w, b = C.weight</span><br><span class="line">u = np.linspace(-<span class="number">3</span>, <span class="number">3</span>, <span class="number">100</span>)</span><br><span class="line">v = (-b - w[<span class="number">0</span>] * u) / w[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>然后根据模型参数绘制分类效果<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(X[:<span class="number">500</span>, <span class="number">0</span>], X[:<span class="number">500</span>, <span class="number">1</span>], label=<span class="string">&#x27;Positive&#x27;</span>)</span><br><span class="line">plt.scatter(X[<span class="number">500</span>:, <span class="number">0</span>], X[<span class="number">500</span>:, <span class="number">1</span>], label=<span class="string">&#x27;Negative&#x27;</span>)</span><br><span class="line">plt.plot(u, v, label=<span class="string">&#x27;Separation&#x27;</span>, c=<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;$x$&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;$y$&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Separation Sample&#x27;</span>)</span><br><span class="line">plt.grid()</span><br><span class="line">plt.legend()</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.savefig(<span class="string">&#x27;./figure/separation.png&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>可以看到，我们实现的SVM可以很好地将两组数据分开</p><p><img src="/images/support-vector-machine/separation.png" style="zoom: 75%;" /></p><p>为了在MNIST和CIFAR-10数据集上测试性能，需要对数据进行预处理，这里我们将图像展开为向量，并将像素值归一化到 $[0, 1]$ 区间，对于MNIST数据集我们仅保留 $5000$ 个训练样本和 $1000$ 个测试样本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">MNIST</span>(<span class="params">path, group=<span class="string">&#x27;train&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> group == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> gzip.<span class="built_in">open</span>(os.path.join(path, <span class="string">&#x27;train-images-idx3-ubyte.gz&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            image = np.frombuffer(file.read(), np.uint8, offset=<span class="number">16</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>) / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">with</span> gzip.<span class="built_in">open</span>(os.path.join(path, <span class="string">&#x27;train-labels-idx1-ubyte.gz&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            label = np.frombuffer(file.read(), np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">elif</span> group == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">        <span class="keyword">with</span> gzip.<span class="built_in">open</span>(os.path.join(path, <span class="string">&#x27;t10k-images-idx3-ubyte.gz&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            image = np.frombuffer(file.read(), np.uint8, offset=<span class="number">16</span>).reshape(-<span class="number">1</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>) / <span class="number">255.0</span></span><br><span class="line">        <span class="keyword">with</span> gzip.<span class="built_in">open</span>(os.path.join(path, <span class="string">&#x27;t10k-labels-idx1-ubyte.gz&#x27;</span>), <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            label = np.frombuffer(file.read(), np.uint8, offset=<span class="number">8</span>)</span><br><span class="line">    remain = <span class="number">500</span> <span class="keyword">if</span> group == <span class="string">&#x27;train&#x27;</span> <span class="keyword">else</span> <span class="number">100</span></span><br><span class="line">    image_list, label_list = [], []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        index = np.where(label == value)[<span class="number">0</span>][:remain]</span><br><span class="line">        image_list.append(image[index])</span><br><span class="line">        label_list.append(label[index])</span><br><span class="line">    image, label = np.concatenate(image_list), np.concatenate(label_list)</span><br><span class="line">    index = np.random.permutation(<span class="built_in">len</span>(label))</span><br><span class="line">    <span class="keyword">return</span> image[index], label[index]</span><br></pre></td></tr></table></figure><p>对于CIFAR10数据集，我们做同样的处理<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">CIFAR10</span>(<span class="params">path, group=<span class="string">&#x27;train&#x27;</span></span>):</span><br><span class="line">    <span class="keyword">if</span> group == <span class="string">&#x27;train&#x27;</span>:</span><br><span class="line">        image_list, label_list = [], []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>):</span><br><span class="line">            filename = os.path.join(path, <span class="string">&#x27;data_batch_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(i))</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                data = pickle.load(file, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">            image_list.append(np.array(data[<span class="string">b&#x27;data&#x27;</span>], dtype=np.float32).reshape(-<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>) / <span class="number">255.0</span>)</span><br><span class="line">            label_list.append(np.array(data[<span class="string">b&#x27;labels&#x27;</span>], dtype=np.int32))</span><br><span class="line">        image, label = np.concatenate(image_list), np.concatenate(label_list)</span><br><span class="line">    <span class="keyword">elif</span> group == <span class="string">&#x27;test&#x27;</span>:</span><br><span class="line">        filename = os.path.join(path, <span class="string">&#x27;test_batch&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            data = pickle.load(file, encoding=<span class="string">&#x27;bytes&#x27;</span>)</span><br><span class="line">        image = np.array(data[<span class="string">b&#x27;data&#x27;</span>], dtype=np.float32).reshape(-<span class="number">1</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>) / <span class="number">255.0</span></span><br><span class="line">        label = np.array(data[<span class="string">b&#x27;labels&#x27;</span>], dtype=np.int32)</span><br><span class="line">    remain = <span class="number">500</span> <span class="keyword">if</span> group == <span class="string">&#x27;train&#x27;</span> <span class="keyword">else</span> <span class="number">100</span></span><br><span class="line">    image_list, label_list = [], []</span><br><span class="line">    <span class="keyword">for</span> value <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        index = np.where(label == value)[<span class="number">0</span>][:remain]</span><br><span class="line">        image_list.append(image[index])</span><br><span class="line">        label_list.append(label[index])</span><br><span class="line">    image, label = np.concatenate(image_list), np.concatenate(label_list)</span><br><span class="line">    index = np.random.permutation(<span class="built_in">len</span>(label))</span><br><span class="line">    <span class="keyword">return</span> image[index], label[index]</span><br></pre></td></tr></table></figure></p><p>由于CIFAR10数据集较为困难，我们考虑利用CV方法进行特征提取，这里我们使用HOG特征提高分类效果，首先将彩色图像转换为灰度图像</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">RGB2Gray</span>(<span class="params">image</span>):</span><br><span class="line">    image = <span class="number">0.299</span> * image[<span class="number">0</span>] + <span class="number">0.587</span> * image[<span class="number">1</span>] + <span class="number">0.114</span> * image[<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> image.reshape(<span class="number">1</span>, *image.shape)</span><br></pre></td></tr></table></figure><p>然后实现一个简单的HOG特征提取函数，这里我们没有实现区块重叠，对该函数进行改进应该可以进一步提高分类效果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">HOG</span>(<span class="params">image, block=<span class="number">4</span>, partition=<span class="number">8</span></span>):</span><br><span class="line">    image = RGB2Gray(image).squeeze(axis=<span class="number">0</span>)</span><br><span class="line">    height, width = image.shape</span><br><span class="line">    gradient = np.zeros((<span class="number">2</span>, height, width), dtype=np.float32)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, height-<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, width-<span class="number">1</span>):</span><br><span class="line">            delta_x = image[i, j-<span class="number">1</span>] - image[i, j+<span class="number">1</span>]</span><br><span class="line">            delta_y = image[i+<span class="number">1</span>, j] - image[i-<span class="number">1</span>, j]</span><br><span class="line">            gradient[<span class="number">0</span>, i, j] = np.sqrt(delta_x ** <span class="number">2</span> + delta_y ** <span class="number">2</span>)</span><br><span class="line">            gradient[<span class="number">1</span>, i, j] = np.degrees(np.arctan2(delta_y, delta_x))</span><br><span class="line">            <span class="keyword">if</span> gradient[<span class="number">1</span>, i, j] &lt; <span class="number">0</span>:</span><br><span class="line">                gradient[<span class="number">1</span>, i, j] += <span class="number">180</span></span><br><span class="line">    unit = <span class="number">360</span> / partition</span><br><span class="line">    vertical, horizontal = height // block, width // block</span><br><span class="line">    feature = np.zeros((vertical, horizontal, partition), dtype=np.float32)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(vertical):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(horizontal):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(block):</span><br><span class="line">                <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(block):</span><br><span class="line">                    rho = gradient[<span class="number">0</span>, i*block+k, j*block+l]</span><br><span class="line">                    theta = gradient[<span class="number">1</span>, i*block+k, j*block+l]</span><br><span class="line">                    index = <span class="built_in">int</span>(theta // unit)</span><br><span class="line">                    feature[i, j, index] += rho</span><br><span class="line">            feature[i, j] /= np.linalg.norm(feature[i, j]) + <span class="number">1e-6</span></span><br><span class="line">    <span class="keyword">return</span> feature.reshape(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>基于这些工具函数，我们可以优雅地完成图像分类任务，对于MNIST数据集，一个基于线性核的分类示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">X_train, y_train = MNIST(<span class="string">&#x27;./dataset/mnist_data/&#x27;</span>, group=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">X_test, y_test = MNIST(<span class="string">&#x27;./dataset/mnist_data/&#x27;</span>, group=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">X_train, X_test = X_train.reshape(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>), X_test.reshape(-<span class="number">1</span>, <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">model = SupportVectorClassifier(iteration=<span class="number">100</span>, penalty=<span class="number">0.05</span>)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">p_train, p_test = model.predict(X_train), model.predict(X_test)</span><br><span class="line"></span><br><span class="line">r_train, r_test = ComputeAccuracy(p_train, y_train), ComputeAccuracy(p_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Kernel: Linear, Train: &#123;:.2%&#125;, Test: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(r_train, r_test))</span><br></pre></td></tr></table></figure><p>对于CIFAR10数据集，一个基于HOG特征和高斯核的分类示例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">X_train, y_train = CIFAR10(<span class="string">&#x27;./dataset/cifar-10-batches-py/&#x27;</span>, group=<span class="string">&#x27;train&#x27;</span>)</span><br><span class="line">X_test, y_test = CIFAR10(<span class="string">&#x27;./dataset/cifar-10-batches-py/&#x27;</span>, group=<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">X_train, X_test = BatchHOG(X_train, partition=<span class="number">16</span>), BatchHOG(X_test, partition=<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">kernel = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;gaussian&#x27;</span>, <span class="string">&#x27;gamma&#x27;</span>: <span class="number">0.03</span>&#125;</span><br><span class="line">model = SupportVectorClassifier(iteration=<span class="number">100</span>, kernel=kernel)</span><br><span class="line">model.fit(X_train, y_train)</span><br><span class="line">p_train, p_test = model.predict(X_train), model.predict(X_test)</span><br><span class="line"></span><br><span class="line">r_train, r_test = ComputeAccuracy(p_train, y_train), ComputeAccuracy(p_test, y_test)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Kernel: Gaussian, Train: &#123;:.2%&#125;, Test: &#123;:.2%&#125;&#x27;</span>.<span class="built_in">format</span>(r_train, r_test))</span><br></pre></td></tr></table></figure><p>经过测试，我们实现的SVM分类器在MNIST和CIFAR10数据集上的分类精度如下表所示</p><table style="text-align:center">    <thead>        <tr>            <th>核函数</th>            <th>组别</th>            <th>MNIST</th>            <th>CIFAR10</th>            <th>CIFAR10-HOG</th>        </tr>    </thead>    <tbody>        <tr>            <td rowspan="2">线性核</td>            <td>训练集</td>            <td>96.96%</td>            <td>76.14%</td>            <td>77.58%</td>        </tr>        <tr>            <td>测试集</td>            <td>90.70%</td>            <td>33.60%</td>            <td>39.50%</td>        </tr>        <tr>            <td rowspan="2">多项式核</td>            <td>训练集</td>            <td>100.00%</td>            <td>99.86%</td>            <td>100.00%</td>        </tr>        <tr>            <td>测试集</td>            <td>94.00%</td>            <td>37.70%</td>            <td>44.10%</td>        </tr>        <tr>            <td rowspan="2">高斯核</td>            <td>训练集</td>            <td><b>99.68%</b></td>            <td>99.14%</td>            <td><b>94.54%</b></td>        </tr>        <tr>            <td>测试集</td>            <td><b>94.80%</b></td>            <td>34.10%</td>            <td><b>47.00%</b></td>        </tr>        <tr>            <td rowspan="2">Sigmoid核</td>            <td>训练集</td>            <td>95.42%</td>            <td>7.96%</td>            <td>59.82%</td>        </tr>        <tr>            <td>测试集</td>            <td>92.10%</td>            <td>7.40%</td>            <td>44.70%</td>        </tr>    </tbody></table><p>此外，我们对模型的收敛性和各个核函数的参数选择进行了测试，模型精度与迭代次数的关系如下图所示</p><p><img src="/images/support-vector-machine/convergence.png" style="zoom: 75%;" /></p><p>线性核分类精度与 $C$ 和 $\varepsilon$ 的关系如下图所示</p><p><img src="/images/support-vector-machine/linear.png" style="zoom: 75%;" /></p><p>多项式核分类精度与 $\gamma$ 和 $d$ 的关系如下图所示</p><p><img src="/images/support-vector-machine/polynomial.png" style="zoom: 75%;" /></p><p>高斯核分类精度与 $C$ 和 $\gamma$ 的关系如下图所示</p><p><img src="/images/support-vector-machine/gaussian.png" style="zoom: 75%;" /></p><p>Sigmoid核分类精度与 $\gamma$ 和 $r$ 的关系如下图所示</p><p><img src="/images/support-vector-machine/sigmoid.png" style="zoom: 75%;" /></p><p>上述结果揭示了各个参数对模型性能的影响，可以为调参提供一定的指导作用</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>SVM从过去的炙手可热到如今的日薄西山，仅仅过去了十年的时间，无论是精度还是效率，SVM都完败于当下随处可见的神经网络，关于从零开始实现SVM的意义，我也感到迷茫，但这一过程或多或少改变了我对机器学习的认知，一个简洁优雅的多项式时间精确算法，也许只能满足理论研究者的洁癖，而优化复杂模型的近似算法，在工程上赢得了未来。作为一门课程的大作业，笔者的实现难免存在疏漏和不足，希望读者谅解</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h2&gt;&lt;p&gt;这篇文章诞生于机器学习课程无聊的大作业，既然已经为此浪费了不少时间，不妨再多花点时间写一篇文章，借此记录一下实现过程。支持向</summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="记录" scheme="https://xxyqwq.github.io/tags/%E8%AE%B0%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1125 合并优先队列</title>
    <link href="https://xxyqwq.github.io/2023/03/18/acmoj-1125/"/>
    <id>https://xxyqwq.github.io/2023/03/18/acmoj-1125/</id>
    <published>2023-03-18T14:54:31.000Z</published>
    <updated>2023-03-18T15:10:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem/1125">ACMOJ - 1125 - 合并优先队列</a></p><p>初始共有 $n$ 个数各成一组，设计一个算法支持以下操作：</p><ul><li>将第 $x$ 组和第 $y$ 组合并</li><li>删除并输出第 $x$ 组中最小的数</li><li>向第 $x$ 组中加入一个数 $y$</li></ul><p>保证初始个数 $n\leq 3\times 10^5$，操作次数 $m\leq 3\times 10^5$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>我们构造 $n$ 个优先队列，直接模拟即可，对于合并操作，只要将第 $y$ 组中的元素依次弹出，插入到第 $x$ 组中即可。这种解法的复杂度高达 $O(nm\log n)$，但是由于测试数据的随机性，不会发生最坏情况</p><p>事实上，我们只需稍作修改，利用<strong>启发式合并</strong>的方法，每次合并将较小的队列合并到较大的队列中，这样可以保证每次合并的均摊复杂度为 $O(\log n)$，总复杂度为 $O\left ((n+m)\log ^2 n\right )$</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><p>务必保证优先队列实现的正确性，且预分配空间不要过大，否则可能会内存超限</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这里只给出朴素算法直接模拟的代码，启发式合并读者可以自行实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">300005</span>;</span><br><span class="line"></span><br><span class="line">std::priority_queue&lt;<span class="type">int</span>, std::vector&lt;<span class="type">int</span>&gt;, std::greater&lt;<span class="type">int</span>&gt;&gt; q[NMAX];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T result = <span class="built_in">T</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(word))</span><br><span class="line">        sign |= (word == <span class="string">&#x27;-&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(word))</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">T</span>(word - <span class="string">&#x27;0&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    value = sign ? -result : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value, Ts &amp;...remain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(value);</span><br><span class="line">    <span class="built_in">read</span>(remain...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n, m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">read</span>(x), q[i].<span class="built_in">push</span>(x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, x, a, b; i &lt; m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(x);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(a, b);</span><br><span class="line">            <span class="keyword">while</span> (!q[b].<span class="built_in">empty</span>())</span><br><span class="line">                q[a].<span class="built_in">push</span>(q[b].<span class="built_in">top</span>()), q[b].<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(a);</span><br><span class="line">            <span class="keyword">if</span> (q[a].<span class="built_in">empty</span>())</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, q[a].<span class="built_in">top</span>()), q[a].<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(a, b);</span><br><span class="line">            q[a].<span class="built_in">push</span>(b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem/1125&quot;&gt;ACM</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1049 前序中序求二叉树</title>
    <link href="https://xxyqwq.github.io/2023/03/18/acmoj-1049/"/>
    <id>https://xxyqwq.github.io/2023/03/18/acmoj-1049/</id>
    <published>2023-03-18T14:38:17.000Z</published>
    <updated>2023-03-18T14:52:13.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem/1049">ACMOJ - 1049 - 前序中序求二叉树</a></p><p>给定二叉树的前序遍历和中序遍历，将二叉树以数组形式输出</p><p>保证节点个数 $n\leq 26$，且输出长度 $k\leq 10^3$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这是一个经典的二叉树问题，我们使用递归的方法求解：</p><ul><li>选取前序遍历的第一个节点作为子树根节点</li><li>在中序遍历中找到该节点的位置，其左侧构成左子树，右侧构成右子树</li><li>将前序遍历相应地分成两棵子树，分别递归地重复上述过程</li></ul><p>由于递归深度不超过 $n$，每层子问题的规模之和也不超过 $n$，因此时间复杂度为 $O(n^2)$</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>注意数组开够大小，避免越界</li><li>注意递归的边界条件和参数传递准确无误</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> pre[<span class="number">35</span>], mid[<span class="number">35</span>], val[<span class="number">1005</span>];</span><br><span class="line"><span class="type">int</span> len, cnt = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">find</span><span class="params">(<span class="type">int</span> pre_left, <span class="type">int</span> pre_right, <span class="type">int</span> mid_left, <span class="type">int</span> mid_right, <span class="type">int</span> order)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mid_left &gt; mid_right)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    val[order] = pre[pre_left], cnt = std::<span class="built_in">max</span>(cnt, order);</span><br><span class="line">    <span class="type">int</span> root = mid_left;</span><br><span class="line">    <span class="keyword">while</span> (root &lt;= mid_right &amp;&amp; mid[root] != pre[pre_left])</span><br><span class="line">        root++;</span><br><span class="line">    <span class="built_in">find</span>(pre_left + <span class="number">1</span>, pre_left + root - mid_left, mid_left, root - <span class="number">1</span>, order &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">find</span>(pre_left + root - mid_left + <span class="number">1</span>, pre_right, root + <span class="number">1</span>, mid_right, order &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>, pre, mid), len = <span class="built_in">strlen</span>(pre);</span><br><span class="line">    <span class="built_in">find</span>(<span class="number">0</span>, len - <span class="number">1</span>, <span class="number">0</span>, len - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">        <span class="keyword">if</span> (val[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c &quot;</span>, val[i]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;NULL &quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem/1049&quot;&gt;ACM</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1216 括号匹配</title>
    <link href="https://xxyqwq.github.io/2023/03/18/acmoj-1216/"/>
    <id>https://xxyqwq.github.io/2023/03/18/acmoj-1216/</id>
    <published>2023-03-18T11:39:21.000Z</published>
    <updated>2023-03-18T12:01:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem/1216">ACMOJ - 1216 - 括号匹配</a></p><p>模拟一个括号栈，包含<code>()[]&#123;&#125;</code>六种括号，支持如下四种操作：</p><ol><li>向栈中压入元素</li><li>从栈中弹出元素</li><li>查询栈顶元素</li><li>判断栈中自底向上构成的括号序列是否匹配</li></ol><p>保证操作次数 $n\leq 10^6$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>前置知识：利用栈进行括号匹配 <a href="https://zhuanlan.zhihu.com/p/134675879">参考链接</a></p><p>由于本题需要支持动态匹配，我们维护<strong>两个</strong>栈，$P$ 用于保存括号，$Q$ 用于括号匹配</p><ul><li>向 $P$ 中压入元素 $x$ 时，我们按照括号匹配的规则对 $Q$ 进行维护</li><li>从 $P$ 中弹出元素 $x$ 时，我们将压入 $x$ 时对 $Q$ 的修改还原</li></ul><p>由于压入 $x$ 时，可能会向 $Q$ 中压入元素，也可能会从 $Q$ 中弹出元素，因此我们需要记录 $x$ 对 $Q$ 的修改类型，方便后续的维护</p><p>由于每次操作的复杂度都是 $O(1)$，算法的复杂度为 $O(n)$，由于问题规模 $n\leq 10^6$，如果使用 $O(n^2)$ 的算法处理问题一定会超时</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>推荐用数组模拟栈，代码会更加简洁</li><li>读入括号时，建议直接读入字符串，取其中首个元素，这样可以避免读入空字符的问题</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> s[NMAX], t[NMAX], b[<span class="number">5</span>], c;</span><br><span class="line"><span class="type">int</span> n, x, p = <span class="number">0</span>, q = <span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> f[NMAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">        <span class="keyword">if</span> (x == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b), c = b[<span class="number">0</span>];</span><br><span class="line">            s[++p] = c;</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span> &amp;&amp; q &amp;&amp; t[q] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                q--, f[p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;]&#x27;</span> &amp;&amp; q &amp;&amp; t[q] == <span class="string">&#x27;[&#x27;</span>)</span><br><span class="line">                q--, f[p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; q &amp;&amp; t[q] == <span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">                q--, f[p] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                t[++q] = c, f[p] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            c = s[p];</span><br><span class="line">            <span class="keyword">if</span> (f[p])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (c == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">                    t[++q] = <span class="string">&#x27;(&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">                    t[++q] = <span class="string">&#x27;[&#x27;</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (c == <span class="string">&#x27;&#125;&#x27;</span>)</span><br><span class="line">                    t[++q] = <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                q--;</span><br><span class="line">            p--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!p)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c\n&quot;</span>, s[p]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">4</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, q ? <span class="string">&quot;NO&quot;</span> : <span class="string">&quot;YES&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem/1216&quot;&gt;ACM</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【文章】我的大二生活</title>
    <link href="https://xxyqwq.github.io/2023/02/02/sophomore-life/"/>
    <id>https://xxyqwq.github.io/2023/02/02/sophomore-life/</id>
    <published>2023-02-01T16:00:07.000Z</published>
    <updated>2024-02-16T03:39:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="暑假生活"><a href="#暑假生活" class="headerlink" title="暑假生活"></a>暑假生活</h2><p>小学期结束以后，是一段清闲的时光，而我正想趁此机会做些自己想做的事情。班里有同学邀请我参加ICPC，我参加了preseason training，在数场比赛后我清醒地意识到相比群里其他队爷，我的水平非常有限，遂犹豫是否返校参加选拔。我权衡再三，还是不愿舍弃在家躺平的暑假时光，学期中停课备赛也是我难以接受的。适逢老师邀请我进组打工，我便借机脱身了。后来那位同学如愿拿到了ICPC Regional的金牌，令人艳羡。回过头看，倘若当时我义无反顾地参加ICPC，或许也能取得不错的成绩，然而鉴于这一学期的灾难式的学习压力，放弃不失为一个明智的选择。</p><p>暑假末期，我提前十几天返校做迎新志愿者，以弥补网课学期可怜的素拓分数（事实上效果并不显著）。闲暇的时间正好做一些预习工作，赶在开学前刚好看完了大学物理，概率统计和信号与系统。此时的我满怀信心，对未来的学习进度仿佛胸有成竹，丝毫没有意识到形势之严峻。</p><h2 id="线上与线下"><a href="#线上与线下" class="headerlink" title="线上与线下"></a>线上与线下</h2><p>经过上半年上海疫情的风波，大家都期待着回归正常的线下生活。然而现实总是离奇的，开学后上课的第一天就出现了感染者，线下教学未能撑满两节课就退回了线上。楼栋的封控一波接着一波，谁也不知道自己明天会不会吃上免费盒饭。长达六周的线上生活之后，终于回归了线下教学，但好景不长，一个月内疫情卷土重来，线上线下的同时进行使生活节奏愈发忙乱。又是两周之后，防疫口径发生重大转变，事实放开使疫情迅速在高校内蔓延，当我得知室友感染之后便火速逃离归家，尽管如此，生一场病已经难以避免。对于当下的人来说，这不过是一件必经的小事罢了。</p><h2 id="一些成就感"><a href="#一些成就感" class="headerlink" title="一些成就感"></a>一些成就感</h2><p>学期的前几周，我奔忙于各种评优事项，填了不少测评和申请表，最终也如愿拿到了一些奖学金。虽然数额不算很大，但累积起来已经可以cover一年的生活费。电院各个专业名列前茅者中不乏致远工科同学的身影，也正是看到国家奖学金名单的时候，我意识到很多大佬一直隐藏在我身边。在学科营辅导程序设计和数据结构在我看来也是很有意义的工作，我结识了很多新的朋友，看到了来自不同学院的大佬在各自擅长的领域展现杰出的才能。这些都是成就感的来源，鼓励着我更加积极地学习和生活。成就纪念过往的荣光，而我面向未知和远方。</p><h2 id="学习、学习、还是学习"><a href="#学习、学习、还是学习" class="headerlink" title="学习、学习、还是学习"></a>学习、学习、还是学习</h2><p>如果说大一的课程学习是负重前行，那么大二上的学习必然是在泥沼中阴暗地爬行。同样是30+学分，这一学期的课程难度和任务压力远远超出我的预期，让我时常感到狼狈不堪。各种作业和实验纷至沓来，我不得不花费大量精力才能保质保量地完成它们。有些课程的作业时常需要倾注一整天或者数天的努力，然而在完成之前，另一项作业又发布了，于是任务越积越多，负担也愈发沉重。此外，有些课程本身难度较高，给学习带来了巨大的挑战，例如繁琐复杂的模电被压缩在2学时的课程中，课后却必须花费超过4学时的时间去重新理解。</p><p>在这个学期，不同课程的学习体验产生了显著的差异。以张宇昊和陶表帅两位老师的算法设计与分析为例，这门课程对于证明严谨性和英文水平的要求较高，在编程任务中也有严格的代码查重，但是由于课程重要性强，老师讲解水平较高，助教也都非常负责，大家普遍掌握程度较高，好评如潮。反观信号与系统等课程，上课讲解效率低下，对于课后作业缺乏良好的指导，导致大家难以掌握扎实，怨声载道。</p><p>纵观整个学期的学习过程，仿佛置身漫长的黑暗隧道，在望不到尽头的恐惧中匍匐前行，又被沉重的枷锁缚住手脚，长期不得挣脱。这种痛苦源于不合理的培养计划和课程设计，作为学生如蝼蚁般无力改变。我凭借着扎实的基础和坚定的毅力最终坚持下来，可那些普通而无助的人又该如何呢？</p><h2 id="考试周"><a href="#考试周" class="headerlink" title="考试周"></a>考试周</h2><p>由于平时巨大的课程难度和任务量，即使临近考试周，大家手头仍有大量作业尚未完成，期末复习更是天方夜谭。得益于尽早完成任务的策略和前几周不懈的努力，我腾出了宝贵的一周提前进行复习。期间，我发现了大量的知识漏洞，并通过反复看书刷题来弥补，这一周的复习对部分课程的成绩至关重要。</p><p>总结来说，这一学期的考试有放水现象，平均分相较往年偏高。我对自己的成绩比较满意，其中大学物理和模拟电子技术的高分算是预料之外，计算机体系结构勉强90分不太满意，一方面是课程设计存在问题，不在本文讨论范围之内，另一方面在复习时忽视了对基本计算题型的训练。考虑到身体健康和时间安排，我申请了信号与系统的缓考，需要在寒假里做相应的复习和练习。</p><h2 id="年终总结"><a href="#年终总结" class="headerlink" title="年终总结"></a>年终总结</h2><p>我在自己2022年度总结的文案里写道：</p><blockquote><p>过去的一年里，几乎所有的计划都被打乱了，当初信誓旦旦要做的事情，满怀期许想学的知识，都在生活的一团乱麻中抛之脑后。我曾不止一次地想在闲暇之余探索一些专业知识，亦或是出去逛逛，让自己的生活显得不那么无聊，然而现实是极度的忙碌和频繁的封控，以至于热情终于被消磨殆尽。不可否认，这一年对我的影响是极大的，它迫使我不断地观察和思考，潜移默化地重塑着我对世界的理解。闻媛老师的《经济与社会伦理》让我印象深刻，它让我深入地思考社会运作的合理性，重新审视那些看似理所应当的认知，建立稳定的伦理思维。</p></blockquote><p>几个月来，我自囚于课程的一亩三分地难以脱身，为完成作业疲于奔命的狼狈真有几分抱薪救火的意味。我总是追求完满，却又太在意得失，囿于寻求局部的最优解，反而缺少了一以贯之的追求。我竭尽全力，究竟想要什么，这是一个亟待回答的问题。</p><h2 id="新的开始"><a href="#新的开始" class="headerlink" title="新的开始"></a>新的开始</h2><p>历史的进程呼啸而过，太多老人没有挺过那个寒冬，我坐在书桌前，早已听惯了白事的唢呐声，以至于有几分麻木。当春寒料峭时，我重新踏进校门，已是另一番图景，宽阔的道路上再没有人掩面而行，疾病像是从这片土地上消失了一般，只剩下宁静和安详。我隐隐感觉到一切都要归于寻常了，但21年入学的我其实并不知道何谓寻常，反而多了一些不安。开学的第一节课是俞凯老师的《智能语音识别》，上课铃响时教室里几乎是座无虚席，给人一种久违的紧迫感，把网课时期的慵懒和懈怠一扫而空。这是新学期的伊始，也是大学阶段一个全新的开始。</p><h2 id="清闲的时光"><a href="#清闲的时光" class="headerlink" title="清闲的时光"></a>清闲的时光</h2><p>学期的前几周，是在清闲中度过的，没有太多数学和物理课程的作业压力，也没有太高的课程难度，每天都有大把的时间可以自由支配。在这段时间里，我时常在傍晚出门散步，或是在周末和室友去校外改善伙食，潮汕汤面的海鲜汤面，御陕坊的油泼扯面，还有海宁煲和东记水饺，都称得上物美价廉。我开始读手边的CSAPP，并惊叹于它的包罗万象，从《程序设计》《计算机体系结构》到《操作系统》《计算机网络》都有深入浅出的讲解，无愧于作为一本顶级的自学指南。与此同时，我的CET6意外地拿到了600多分，这必须归功于试点班的培养模式，倘若没有江波老师全英文授课的《线性优化与凸优化》，我的听力大概会维持在高中毕业时的水准。舒适的生活节奏令人沉湎，但我清楚地知道这是短暂的，一旦各种作业布置下来，就会回归写代码赶报告的状态。</p><h2 id="谈谈大作业"><a href="#谈谈大作业" class="headerlink" title="谈谈大作业"></a>谈谈大作业</h2><p>临近期末的压力，80%来源于各门课程的大作业，剩下20%是小作业。</p><p>各种大作业的质量参差不齐，有些难度适中，与课程内容结合紧密，能够很好地提高学生的课程理解，有些过于简单，陈陈相因，是卷报告页数的高发地，有些难度过大，不知所云，与课程内容严重脱节，和造火箭并无二致。《深度学习》的作业设计便是一个表率，从回归到分类，从CNN到RNN，最终实现一个拼图任务，由浅入深，真正体现了张量变换的艺术。相比之下，《机器学习》和《智能语音识别》的大作业可谓折磨，前者是因为任务设计缺乏深思熟虑，低估了完整复现传统算法的难度，后者则是缺乏详尽的指导文档，对基础薄弱者极度不友好。对习惯于赶deadline的同学而言，学期的最后几周无疑是噩梦，甚至还要在考试周抽出时间在超算上排队完成LVCSR实验。然而，大作业扎堆的问题并没有给我造成困扰，我坚持任务提前的策略，提前一周完成了所有任务，于是我能够产出质量更高的内容，甚至有极其充裕的时间复习备考。</p><p>回顾这一学期的各门课程，我不得不承认多数课程的质量相当高，诸如《数字信号与图像处理》《随机过程》都能让人感觉到作业设计的用心之处，但并非所有老师都愿意在教学上投入大量精力，在现行的评价体系下这也无可厚非。</p><h2 id="又逢期末"><a href="#又逢期末" class="headerlink" title="又逢期末"></a>又逢期末</h2><p>“随机过程随机过，量子力学量力学”，尽管已是身经百战，期末考试的压迫感依旧十足。好在时间充裕，我便把王先智老师的PPT完整地看了一遍，再做试卷时倒也不是那么困难了，大概是老师们情知在工科开设《量子力学》有些为难学生，有意宽松给分，互相给一个台阶下罢了。《数字信号与图像处理》和《随机过程》的难度相比往年显著提升，这当然在预料之内，但由于老师善于捞人，给分并没有变差，唯有《机器学习》由于繁重的任务和苛刻的给分饱受抨击。</p><p>更有意思的是3学分的毛概被推上风口浪尖，由于不同教学班的均分存在显著差异，竟有同学致信教务处严查给分高的老师。诚然，利己主义者随处可见，但这种魔怔于学积分的心态着实令人感到可悲，有些人或许时至今日还没能明白“选择大于努力”这个浅显的道理。写到这里我不免要赞美北老师，他让我第一次发现红课也可以如此生动充实，而非令人昏昏欲睡的，我们的高等教育正是需要这类老师，把学生的素质培养和人格健全作为己任。</p><p>总而言之，这个期末还算令人满意，毕竟大多数课程都拿到了满绩，这应当归功于老师和我的共同努力。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>日子就这样一天天地过去，只有在看见新生军训的时候，我才会想起自己要成为大三老狗了。这一年中，我接触了很多新知，认识了很多大佬，实验室的实习也逐渐走上正轨。更多的选择摆在了我的面前，迫使我反复权衡，以免走错任何一步。无数令人不安的消息萦绕在耳畔，遮住了前路的微光，这个世界会好吗？我并不知道答案，我只能在黑暗中提灯探行，企图找到那一条属于我自己的幽径。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;暑假生活&quot;&gt;&lt;a href=&quot;#暑假生活&quot; class=&quot;headerlink&quot; title=&quot;暑假生活&quot;&gt;&lt;/a&gt;暑假生活&lt;/h2&gt;&lt;p&gt;小学期结束以后，是一段清闲的时光，而我正想趁此机会做些自己想做的事情。班里有同学邀请我参加ICPC，我参加了preseaso</summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="总结" scheme="https://xxyqwq.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1486 布尔表达式求值</title>
    <link href="https://xxyqwq.github.io/2022/10/14/acmoj-1486/"/>
    <id>https://xxyqwq.github.io/2022/10/14/acmoj-1486/</id>
    <published>2022-10-14T11:37:44.000Z</published>
    <updated>2022-10-14T12:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1486">ACMOJ - 1486 - 布尔表达式求值</a></p><p>给定合法的布尔表达式，规则如下：</p><ul><li>$\text{f}$：字面量 false</li><li>$\text{t}$: 字面量 true</li><li>$\text{!}(x)$：非运算 not</li><li>$\text{&amp;}(x_1,x_2,\dots )$：与运算 and</li><li>$\text{|}(x_1,x_2,\dots )$：或运算 or</li></ul><p>计算布尔表达式的结果，保证长度 $|S|\leq10^4$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>与后缀表达式的处理方式类似，我们采用栈来存储表达式内容，由于括号和逗号并不产生实际语义，我们只保存操作符和字面量</p><p>顺序遍历表达式，将操作符和字面量依次入栈，忽略左括号和逗号，每当遇到右括号时执行出栈并完成一组计算，具体细节如下：</p><ul><li>不断弹出栈顶，直到遇到操作符</li><li>记录弹出字面量的类型，即是否出现过 true 和 false</li><li>对于 not 运算，只需取反唯一的运算数</li><li>对于 and 运算，若出现过 false，结果为 false，否则为 true</li><li>对于 or 运算，若出现过 true 结果为 true，否则为 false</li></ul><p>最后，我们将本次计算所得的结果以字面量的形式放回栈顶</p><p>该算法可在 $O(n)$ 的时间复杂度内完成表达式的计算</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">20005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stack</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span> : <span class="keyword">public</span> Stack&lt;ElementType&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StackNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        ElementType data;</span><br><span class="line">        StackNode *next;</span><br><span class="line">        <span class="built_in">StackNode</span>() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">StackNode</span>(<span class="type">const</span> ElementType &amp;_data, StackNode *_next = <span class="literal">nullptr</span>) : <span class="built_in">data</span>(_data), <span class="built_in">next</span>(_next) &#123;&#125;</span><br><span class="line">        ~<span class="built_in">StackNode</span>() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    StackNode *head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedStack</span>();</span><br><span class="line">    ~<span class="built_in">LinkedStack</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::~<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">bool</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">empty</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">push</span>(<span class="type">const</span> ElementType &amp;element)</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> <span class="built_in">StackNode</span>(element, head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Stack is already empty!&quot;</span>;</span><br><span class="line">    StackNode *temp = head;</span><br><span class="line">    ElementType value = temp-&gt;data;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">top</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Stack is already empty!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    StackNode *temp;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkedStack&lt;<span class="type">char</span>&gt; waiting;</span><br><span class="line"><span class="type">char</span> expression[SIZE];</span><br><span class="line"><span class="type">int</span> length, count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, expression);</span><br><span class="line">    length = <span class="built_in">strlen</span>(expression);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> position = <span class="number">0</span>; position &lt; length; position++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (expression[position] == <span class="string">&#x27;(&#x27;</span> || expression[position] == <span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (expression[position] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">bool</span> right = <span class="number">0</span>, wrong = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!waiting.<span class="built_in">empty</span>() &amp;&amp; (waiting.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span> || waiting.<span class="built_in">top</span>() == <span class="string">&#x27;f&#x27;</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (waiting.<span class="built_in">pop</span>() == <span class="string">&#x27;t&#x27;</span>)</span><br><span class="line">                    right = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    wrong = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> operation = waiting.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (operation == <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (right)</span><br><span class="line">                    waiting.<span class="built_in">push</span>(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    waiting.<span class="built_in">push</span>(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="string">&#x27;&amp;&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (wrong)</span><br><span class="line">                    waiting.<span class="built_in">push</span>(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    waiting.<span class="built_in">push</span>(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="string">&#x27;|&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (right)</span><br><span class="line">                    waiting.<span class="built_in">push</span>(<span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    waiting.<span class="built_in">push</span>(<span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            waiting.<span class="built_in">push</span>(expression[position]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, waiting.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span> ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 14373 循环队列</title>
    <link href="https://xxyqwq.github.io/2022/10/14/acmoj-14373/"/>
    <id>https://xxyqwq.github.io/2022/10/14/acmoj-14373/</id>
    <published>2022-10-14T09:33:17.000Z</published>
    <updated>2023-03-18T12:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=14373">ACMOJ - 14373 - 循环队列</a></p><p>实现一个循环队列，支持如下操作：</p><ol><li>将新的元素入队，并输出当前队尾的下标和元素个数</li><li>将队首元素出队，并输出当前队首的下标和元素个数</li></ol><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>按照题目要求实现即可，本题输出较为严格，请注意实现的<strong>规范性</strong></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Queue</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">front</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SequentialQueue</span> : <span class="keyword">public</span> Queue&lt;ElementType&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ElementType *elementData;</span><br><span class="line">    <span class="type">int</span> headPosition, tailPosition, totalCapacity;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">expand</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">SequentialQueue</span>(<span class="type">int</span> size = <span class="number">10</span>);</span><br><span class="line">    ~<span class="built_in">SequentialQueue</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">front</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_head_position</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_tail_position</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">get_queue_length</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">expand</span>()</span><br><span class="line">&#123;</span><br><span class="line">    ElementType *temp = elementData;</span><br><span class="line">    elementData = <span class="keyword">new</span> ElementType[<span class="number">2</span> * totalCapacity];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; totalCapacity; i++)</span><br><span class="line">        elementData[i] = temp[(headPosition + i) % totalCapacity];</span><br><span class="line">    headPosition = <span class="number">0</span>;</span><br><span class="line">    tailPosition = totalCapacity - <span class="number">1</span>;</span><br><span class="line">    totalCapacity *= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">delete</span>[] temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">SequentialQueue&lt;ElementType&gt;::<span class="built_in">SequentialQueue</span>(<span class="type">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">    elementData = <span class="keyword">new</span> ElementType[size];</span><br><span class="line">    totalCapacity = size;</span><br><span class="line">    headPosition = tailPosition = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">SequentialQueue&lt;ElementType&gt;::~<span class="built_in">SequentialQueue</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] elementData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">bool</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">empty</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> headPosition == tailPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">push</span>(<span class="type">const</span> ElementType &amp;element)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ((tailPosition + <span class="number">1</span>) % totalCapacity == headPosition)</span><br><span class="line">        <span class="built_in">expand</span>();</span><br><span class="line">    tailPosition = (tailPosition + <span class="number">1</span>) % totalCapacity;</span><br><span class="line">    elementData[tailPosition] = element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType SequentialQueue&lt;ElementType&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (headPosition == tailPosition)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Queue is already empty!&quot;</span>;</span><br><span class="line">    headPosition = (headPosition + <span class="number">1</span>) % totalCapacity;</span><br><span class="line">    <span class="keyword">return</span> elementData[headPosition];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType SequentialQueue&lt;ElementType&gt;::<span class="built_in">front</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (headPosition == tailPosition)</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">&quot;Queue is already empty!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> elementData[(headPosition + <span class="number">1</span>) % totalCapacity];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    headPosition = tailPosition = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">int</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">get_head_position</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> headPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">int</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">get_tail_position</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> tailPosition;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">int</span> SequentialQueue&lt;ElementType&gt;::<span class="built_in">get_queue_length</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (tailPosition - headPosition + totalCapacity) % totalCapacity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = x * <span class="number">10</span> + c - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        c = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> s, n, t, x;</span><br><span class="line">    <span class="built_in">read</span>(s), <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="function">SequentialQueue&lt;<span class="type">int</span>&gt; <span class="title">Q</span><span class="params">(s)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">read</span>(t);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">read</span>(x);</span><br><span class="line">            Q.<span class="built_in">push</span>(x);</span><br><span class="line">            std::cout &lt;&lt; Q.<span class="built_in">get_tail_position</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; Q.<span class="built_in">get_queue_length</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (t == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Q.<span class="built_in">empty</span>())</span><br><span class="line">                Q.<span class="built_in">pop</span>();</span><br><span class="line">            std::cout &lt;&lt; Q.<span class="built_in">get_head_position</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; Q.<span class="built_in">get_queue_length</span>() &lt;&lt; std::endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 14151 出栈序列</title>
    <link href="https://xxyqwq.github.io/2022/10/14/acmoj-14151/"/>
    <id>https://xxyqwq.github.io/2022/10/14/acmoj-14151/</id>
    <published>2022-10-14T09:31:42.000Z</published>
    <updated>2022-10-14T11:59:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=14151">ACMOJ - 14151 - 出栈序列</a></p><p>现有 $n$ 个整数 $1,2,\dots ,n$ 依次入栈，判断出栈序列的合法性</p><p>题目存在 $T$ 组测试数据，每组数据规模为 $n$，保证 $T\leq 10,n\leq 10^6$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>事实上，我们直接对出入栈操作进行模拟即可</p><p>按照出栈顺序遍历每一个整数 $a_i$，若其未曾入栈，将所有不大于 $a_i$ 的整数依次入栈，并将 $a_i$ 弹出，若其已在栈中，倘若其在栈顶，弹出即可，否则断言该出栈序列不合法</p><p>该算法的时间复杂度为 $O(T\cdot n)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T result = <span class="built_in">T</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(word))</span><br><span class="line">        sign |= (word == <span class="string">&#x27;-&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(word))</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">T</span>(word - <span class="string">&#x27;0&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    value = sign ? -result : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> stack[NMAX], top, current, a[NMAX], T, n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">bool</span> fail = <span class="literal">false</span>;</span><br><span class="line">        top = <span class="number">0</span>, current = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">read</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            <span class="built_in">read</span>(a[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] &lt;= current &amp;&amp; stack[top] != a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                fail = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stack[top] == a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                top--;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (current &lt; a[i])</span><br><span class="line">            &#123;</span><br><span class="line">                current++;</span><br><span class="line">                stack[++top] = current;</span><br><span class="line">            &#125;</span><br><span class="line">            top--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, fail ? <span class="string">&quot;No&quot;</span> : <span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1080 后缀表达式</title>
    <link href="https://xxyqwq.github.io/2022/10/14/acmoj-1080/"/>
    <id>https://xxyqwq.github.io/2022/10/14/acmoj-1080/</id>
    <published>2022-10-14T09:27:44.000Z</published>
    <updated>2022-10-14T09:32:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1080">ACMOJ - 1080 - 后缀表达式</a></p><p>计算给定后缀表达式的值，其中<code>@</code>为表达式终止符，<code>.</code>为操作数结束标识</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>按照后缀表达式的规则计算即可，推荐使用字符串进行处理，注意操作数的完整提取</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> suffix[NMAX];</span><br><span class="line"><span class="type">int</span> stack[NMAX], top = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, suffix);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; suffix[p] != <span class="string">&#x27;@&#x27;</span>; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(suffix[p]))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> oprand = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (suffix[p] != <span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">                oprand = oprand * <span class="number">10</span> + suffix[p] - <span class="string">&#x27;0&#x27;</span>, p++;</span><br><span class="line">            stack[++top] = oprand;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (suffix[p] == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">            top--, stack[top] = stack[top] + stack[top + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (suffix[p] == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            top--, stack[top] = stack[top] - stack[top + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (suffix[p] == <span class="string">&#x27;*&#x27;</span>)</span><br><span class="line">            top--, stack[top] = stack[top] * stack[top + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (suffix[p] == <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">            top--, stack[top] = stack[top] / stack[top + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, stack[top]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1058 单循环链表</title>
    <link href="https://xxyqwq.github.io/2022/10/08/acmoj-1058/"/>
    <id>https://xxyqwq.github.io/2022/10/08/acmoj-1058/</id>
    <published>2022-10-08T15:04:28.000Z</published>
    <updated>2022-10-08T15:14:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1058">ACMOJ - 1058 - 单循环链表</a></p><p>按模板代码实现单循环链表，支持如下操作：</p><ol><li>返回链表长度</li><li>在位置 $i$ 插入一个数</li><li>输出位置 $i$ 的数</li><li>删除位置 $i$ 的数</li><li>删除位置 $i$ 的数并将其插入链表尾端</li><li>输出链表中最大的数</li></ol><p>无复杂度要求，但不允许发生内存泄漏</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>标准的单链表实现，注意动态内存管理即可</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>此处给出核心部分代码实现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> LIST</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">NODE</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> data;</span><br><span class="line">        NODE *next;</span><br><span class="line">        <span class="built_in">NODE</span>() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">NODE</span>(<span class="type">int</span> d, NODE *n = <span class="literal">nullptr</span>) : <span class="built_in">data</span>(d), <span class="built_in">next</span>(n) &#123;&#125;</span><br><span class="line">        ~<span class="built_in">NODE</span>() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    NODE *head = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        len = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">NODE *<span class="title">move</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        NODE *p = head;</span><br><span class="line">        <span class="keyword">while</span> (i-- &gt; <span class="number">0</span>)</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NODE *p = <span class="built_in">move</span>(len - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                head = <span class="keyword">new</span> <span class="built_in">NODE</span>(x);</span><br><span class="line">                head-&gt;next = head;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                head = p-&gt;next = <span class="keyword">new</span> <span class="built_in">NODE</span>(x, head);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            NODE *p = <span class="built_in">move</span>(i - <span class="number">1</span>);</span><br><span class="line">            p-&gt;next = <span class="keyword">new</span> <span class="built_in">NODE</span>(x, p-&gt;next);</span><br><span class="line">        &#125;</span><br><span class="line">        len++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NODE *p = <span class="built_in">move</span>(len - <span class="number">1</span>), *q = p-&gt;next;</span><br><span class="line">            head = p-&gt;next = q-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            NODE *p = <span class="built_in">move</span>(i - <span class="number">1</span>), *q = p-&gt;next;</span><br><span class="line">            p-&gt;next = q-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        len--;</span><br><span class="line">        <span class="keyword">if</span> (len == <span class="number">0</span>)</span><br><span class="line">            head-&gt;next = <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">remove_insert</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="type">int</span> x;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            NODE *p = <span class="built_in">move</span>(len - <span class="number">1</span>), *q = p-&gt;next;</span><br><span class="line">            head = p-&gt;next = q-&gt;next;</span><br><span class="line">            x = q-&gt;data;</span><br><span class="line">            <span class="keyword">delete</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            NODE *p = <span class="built_in">move</span>(i - <span class="number">1</span>), *q = p-&gt;next;</span><br><span class="line">            p-&gt;next = q-&gt;next;</span><br><span class="line">            x = q-&gt;data;</span><br><span class="line">            <span class="keyword">delete</span> q;</span><br><span class="line">        &#125;</span><br><span class="line">        len--;</span><br><span class="line">        <span class="built_in">insert</span>(len, x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_length</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; len &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">query</span><span class="params">(<span class="type">int</span> i)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= len)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="number">-1</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="built_in">move</span>(i)-&gt;data &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">get_max</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        NODE *p = head;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (p-&gt;data &gt; k)</span><br><span class="line">                k = p-&gt;data;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; k &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        NODE *p = head, *q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            q = p-&gt;next;</span><br><span class="line">            <span class="keyword">delete</span> p;</span><br><span class="line">            p = q;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 11617 字符串相加</title>
    <link href="https://xxyqwq.github.io/2022/10/08/acmoj-11617/"/>
    <id>https://xxyqwq.github.io/2022/10/08/acmoj-11617/</id>
    <published>2022-10-08T14:53:28.000Z</published>
    <updated>2022-10-08T15:04:04.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=11617">ACMOJ - 11617 - 字符串相加</a></p><p>给定仅包含数字的字符串 $a,b$，将其按整数规则相加，并返回相应字符串，要求使用指针风格实现</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>这是一道朴素的高精度加法问题，按照竖式加法规则实现即可，若 $a,b$ 长度不同，先对齐后计算</p><p>注意如下问题：</p><ul><li>处理好字符与整数之间的转换关系</li><li>在字符串末尾添加<code>&#39;\0&#39;</code>作为结束符</li><li>释放动态内存以避免<code>Memory Leak</code>错误</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">1005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> a[NMAX], b[NMAX], *answer;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span> *<span class="title">add</span><span class="params">(<span class="type">char</span> *p, <span class="type">char</span> *q)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> p_len = <span class="built_in">strlen</span>(p), q_len = <span class="built_in">strlen</span>(q), s_len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *s = <span class="keyword">new</span> <span class="type">char</span>[NMAX];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">        s[i] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = i &lt; p_len ? p[i] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>, v = i &lt; q_len ? q[i] - <span class="string">&#x27;0&#x27;</span> : <span class="number">0</span>, c = s[i] - <span class="string">&#x27;0&#x27;</span>, w = u + v + c;</span><br><span class="line">        s[i] = <span class="string">&#x27;0&#x27;</span> + w % <span class="number">10</span>, s[i + <span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span> + w / <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[i] != <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">            s_len = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    s[s_len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%s%s&quot;</span>, &amp;n, &amp;m, a, b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, answer = <span class="built_in">add</span>(a, b));</span><br><span class="line">    <span class="keyword">delete</span>[] answer;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 11038 约瑟夫环</title>
    <link href="https://xxyqwq.github.io/2022/10/08/acmoj-11038/"/>
    <id>https://xxyqwq.github.io/2022/10/08/acmoj-11038/</id>
    <published>2022-10-08T14:02:23.000Z</published>
    <updated>2022-10-08T14:52:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=11038">ACMOJ - 11038 - 约瑟夫环</a></p><p>有 $n$ 个人编号 $1,2,\dots ,n$ 轮流报数（首轮从 $1$ 号开始报数），给定一组 $k_1,k_2,\dots ,k_{n-1}$，第 $i$ 轮报数 $k_i$ 的人出圈，并从下家开始重新报数，问最后留下的人的编号，保证 $n\leq 10^4,k_i\leq 10^8$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>注意到 $k_i$ 的规模并不重要，对剩余人数取模即有 $k_i\leq n$，利用循环链表可以实现 $O(n^2)$ 的模拟</p><p>下面介绍一种递推做法：</p><p>逆向考虑过程，尝试通过第 $i$ 轮的起始位置反推第 $i-1$ 轮的起始位置，在保证相对顺序不变的前提下，我们认为第 $i$ 轮开始时圈内 $n-i+1$ 人的相对位置即为 $0,1,2,\dots ,n-i$</p><p>记第 $i$ 轮的起始位置为 $a_i$，其中 $a_n=0$，反推即有关系 $a_i=(a_{i+1}+k_i)\mod (n-i+1)$，所求 $a_1$ 即为最后留下的人与 $1$ 号的相对位置，此时 $a_1+1$ 即为答案</p><p>该算法的时间复杂度为 $O(n)$，即使 $n\leq 10^8$ 仍可以高效解决问题</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">10005</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> k[NMAX], n, answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;k[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">        (answer += k[n - i + <span class="number">1</span>]) %= i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ++answer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1033 求行列式</title>
    <link href="https://xxyqwq.github.io/2022/09/26/acmoj-1033/"/>
    <id>https://xxyqwq.github.io/2022/09/26/acmoj-1033/</id>
    <published>2022-09-26T04:58:19.000Z</published>
    <updated>2022-10-08T13:00:16.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1033">ACMOJ - 1033 - 行列式求值</a></p><p>求 $n$ 阶行列式 $\begin{vmatrix} a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\<br>a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n} \\<br>\vdots &amp; \vdots &amp; \ddots &amp; \vdots \\<br>a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\end{vmatrix}$ 的值，保证 $n\leq 10$ 且答案在<code>int</code>范围内</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>行列式的求解有多种方法，具体参见《线性代数》教材</p><p>此处介绍以下三种方法：</p><ul><li><strong>全排列法</strong>：利用行列式的全排列定义直接计算</li><li><strong>余子式法</strong>：利用行列式的按行展开性质递归计算</li><li><strong>高斯消元</strong>：利用初等变换将行列式化为上三角阵简化计算</li></ul><h3 id="全排列法"><a href="#全排列法" class="headerlink" title="全排列法"></a>全排列法</h3><p>设 $A=(a_{ij})_{n\times n}\in \mathbb{K}^{n\times n}$，则 $|A|=\sum \limits _{j_1j_2\dots j_n}(-1)^{\tau(j_1j_2\dots j_n)}a_{1j_1}a_{2j_2}\dots a_{nj_n}$</p><p>利用<code>std::next_permutation</code>函数构造 $1,2,\dots ,n$ 的全排列，借助函数统计逆序对数，完成计算</p><p>时间复杂度为 $O(n^2\cdot n!)$，利用分治求逆序对可以优化到 $O(n\log n\cdot n!)$</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">15</span>][<span class="number">15</span>], p[<span class="number">15</span>], n, answer;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">invertion</span><span class="params">(<span class="type">int</span> v[], <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= k; j++)</span><br><span class="line">            <span class="keyword">if</span> (v[i] &gt; v[j])</span><br><span class="line">                r++;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        p[i] = i;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> term = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">            term *= a[i][p[i]];</span><br><span class="line">        term *= (<span class="built_in">invertion</span>(p, n) &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        answer += term;</span><br><span class="line">    &#125; <span class="keyword">while</span> (std::<span class="built_in">next_permutation</span>(p + <span class="number">1</span>, p + n + <span class="number">1</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, answer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="余子式法"><a href="#余子式法" class="headerlink" title="余子式法"></a>余子式法</h3><p>设 $D=|a_{ij}|_{n\times n}$，则 $D=\sum \limits _{j=1}^na_{1j}A_{1j}$，其中 $A_{1j}$ 为 $D$ 的代数余子式</p><p>为实现递归计算，我们动态开辟数组，并且将二维数组压缩至一维，即构造映射 $a_{ij}\rightarrow a_{in+j}$，以此解决函数传参问题</p><p>时间复杂度为 $O(n!)$，实际运行快于全排列法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a[<span class="number">105</span>], n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">det</span><span class="params">(<span class="type">int</span> *v, <span class="type">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> *v;</span><br><span class="line">    <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> p = <span class="number">0</span>; p &lt; k; p++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> *s = <span class="keyword">new</span> <span class="type">int</span>[(k - <span class="number">1</span>) * (k - <span class="number">1</span>)];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k - <span class="number">1</span>; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; k - <span class="number">1</span>; j++)</span><br><span class="line">                *(s + i * (k - <span class="number">1</span>) + j) = *(v + (i + <span class="number">1</span>) * k + (j &lt; p ? j : (j + <span class="number">1</span>)));</span><br><span class="line">        r += ((p &amp; <span class="number">1</span>) ? <span class="number">-1</span> : <span class="number">1</span>) * *(v + p) * <span class="built_in">det</span>(s, k - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">delete</span>[] s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, a + i * n + j);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">det</span>(a, n));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="高斯消元"><a href="#高斯消元" class="headerlink" title="高斯消元"></a>高斯消元</h3><ul><li>依次遍历第 $i=1,2,\dots ,n$ 行，将 $a_{ii}$ 作为主元</li><li>依次遍历第 $j=i+1,i+2,\dots ,n$ 行，通过初等变换将 $a_{ji}$ 消为 $0$</li><li>特别地，若 $a_{ii}=0$，则遍历 $j=i+1,i+2,\dots ,n$ 寻找 $a_{ji}\neq 0$，并将第 $i$ 行与第 $j$ 行交换<br>（<strong>每次交换两行会使结果的正负性反转</strong>）</li><li>若 $a_{ji}$ 全为 $0$，行列式的值即为 $0$</li><li>消元完成得到上三角阵 $D’$，其对角线元素乘积即为行列式的结果</li></ul><p>时间复杂度为 $O(n^3)$，远优于前两种方法，但存在浮点数精度的局限性，代码实现中需要思考如下问题：</p><ul><li>如何判定两个浮点数相等？</li><li>输出结果是否可以强制转换为整数？</li><li>如果不行，应该怎么做？</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> a[<span class="number">15</span>][<span class="number">15</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">equal</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(x - y) &lt; eps;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">swap</span><span class="params">(T &amp;x, T &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T temp = x;</span><br><span class="line">    x = y, y = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">determination</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">equal</span>(a[i][i], <span class="number">0</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> j;</span><br><span class="line">            <span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">equal</span>(a[j][i], <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (j == n + <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            r *= <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">                <span class="built_in">swap</span>(a[i][k], a[j][k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">double</span> p = -(a[j][i] / a[i][i]);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = i; k &lt;= n; k++)</span><br><span class="line">                a[j][k] += p * a[i][k];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        r *= a[i][i];</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">regularize</span><span class="params">(<span class="type">double</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">double</span> y = <span class="built_in">fabs</span>(x);</span><br><span class="line">    <span class="keyword">return</span> (x &gt;= <span class="number">0</span> ? <span class="number">1</span> : <span class="number">-1</span>) * <span class="built_in">int</span>(y + <span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="type">double</span> result = <span class="built_in">determination</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">regularize</span>(result));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1014 差分序列</title>
    <link href="https://xxyqwq.github.io/2022/09/25/acmoj-1014/"/>
    <id>https://xxyqwq.github.io/2022/09/25/acmoj-1014/</id>
    <published>2022-09-25T14:17:47.000Z</published>
    <updated>2022-09-25T15:02:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1014">ACMOJ - 1014 - 数列操作</a></p><p>给出两个整数序列 $a_1,a_2,\dots ,a_n$ 和 $b_1,b_2,\dots ,b_n$，对 $\{ a_n\}$ 存在如下两种操作：</p><ul><li>将某个区间的数全部 $+1$</li><li>将某个区间的数全部 $-1$</li></ul><p>试求至少经过多少次操作可以将序列 $\{ a_n\}$ 变为 $\{ b_n\}$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>事实上，通过等价变换，可以使问题大大简化</p><p>首先，我们并不关心 $\{ a_n\}$ 和 $\{ b_n\}$ 具体的数值，影响问题答案的是两者的差异，因此我们对两序列作差，即令 $c_n=a_n-b_n$，此时我们只需要对 $\{ c_n\}$ 进行同样的操作，使得 $\forall i=1,2,\dots ,n$ 都有 $c_i=0$</p><p>现在我们引入<strong>差分序列</strong>的概念</p><blockquote><p>对于序列 $x_1,x_2,\dots ,x_n$，特别规定 $x_0=0$，令 $y_n=x_n-x_{n-1}$ 可以得到新序列 $y_1,y_2,\dots ,y_n$，则 $\{ y_n\}$ 记为 $\{ x_n\}$ 的<strong>差分序列</strong>，相应地，$\{ x_n\}$ 记为 $\{ y_n\}$ 的<strong>前缀和序列</strong></p></blockquote><p>差分与前缀和是一对<strong>互逆</strong>的序列变换，在<strong>静态</strong>的区间求和与区间修改问题中，可以将单次操作的复杂度降低为 $O(1)$</p><p>引入上述概念后，我们重新审视问题</p><p>对序列 $\{ c_n\}$ 作差分，得到差分序列 $\{ d_n\}$，则 $d_i$ 表示原序列中后一项与前一项的差值，我们将原序列中区间 $c_i,c_{i+1},\dots ,c_j$ 全部 $+1$，相当于在差分序列中令 $d_i+1$，并令 $d_{j+1}-1$，该等价性可以通过求前缀和的方式进行验证</p><p>至此，问题已经简化为：</p><blockquote><p>已知序列 $d_1,d_2,\dots ,d_n$，每次选取 $i\leq j$，可以令 $d_i+1,d_{j+1}-1$ 或 $d_i-1,d_{j+1}+1$，求将 $\{ d_n\}$ 全部变为 $0$ 的最小操作次数</p></blockquote><p>不难想到贪心策略，每次选取正负性相反的一对 $d_i,d_{j+1}$，其中正数 $-1$，负数 $+1$，最终无法配对的数字与 $d_{n+1}$ 相消（相当于在原序列中，操作该数之后的整个区间）</p><p>因此，最终答案即为 $\max \left \{ \sum \limits _{d_i&gt;0} |d_i|,\ \sum \limits _{d_i&lt;0} |d_i| \right \}$，其正确性不难验证，算法的时间复杂度为 $O(n)$</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>目标要使所有的 $d_i=0$，因此 $d_1$ 也需要被考虑</li><li>求和变量应当使用<code>long long</code>类型，避免溢出</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">100005</span>;</span><br><span class="line"></span><br><span class="line">LL p, q;</span><br><span class="line"><span class="type">int</span> a[NMAX], n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T result = <span class="built_in">T</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(word))</span><br><span class="line">        sign |= (word == <span class="string">&#x27;-&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(word))</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">T</span>(word - <span class="string">&#x27;0&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    value = sign ? -result : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value, Ts &amp;...remain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(value);</span><br><span class="line">    <span class="built_in">read</span>(remain...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">read</span>(a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">read</span>(x), a[i] -= x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = a[i] - a[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (x &gt; <span class="number">0</span>)</span><br><span class="line">            p += x;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            q -= x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, p &gt; q ? p : q);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1572 二分图</title>
    <link href="https://xxyqwq.github.io/2022/08/30/acmoj-1572/"/>
    <id>https://xxyqwq.github.io/2022/08/30/acmoj-1572/</id>
    <published>2022-08-30T07:33:13.000Z</published>
    <updated>2022-08-30T08:31:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1572">ACMOJ - 1572 - 填满棋盘</a></p><p>在 $n$ 行 $m$ 列的棋盘上，挖去 $k$ 个格子，用若干 $1\times 2$ 的棋子<strong>不可重叠</strong>地放置在剩余格子中，问是否可以铺满剩余棋盘</p><p>共有 $T$ 组测试数据（$T\leq 3$），每组数据保证 $n,m\leq 32$，$k&lt;n\times m$</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>数据范围很小，即使 $O(n^2m^2)$ 的算法也可以轻松解决</p><p>题目以棋盘为背景，因此很容易想到国际象棋棋盘的黑白交错。我们以相同的方式给棋盘染色，则放置的棋子有如下性质：</p><ul><li>棋子必然位于一对相邻的黑白格上</li><li>只要存在一对相邻的黑白格，必然可以放置一枚棋子</li></ul><p>我们不妨将每个格子视为一个节点，从每个黑色格子出发，向与其相邻的每个白色格子连边，这样便形成了一张二分图。该二分图完美建模了棋子放置的情况，一对匹配恰好代表一枚棋子被放置，二分图的最大匹配恰好代表放置棋子的最大数目，故有结论：</p><ul><li>棋子可以铺满剩余棋盘的充要条件是：对应二分图的最大匹配等于剩余格数的一半</li></ul><p>在此二分图上跑匈牙利算法，即有 $O(n^2m^2)$ 的复杂度，但是也可以考虑复杂度更加优秀的网络流方法</p><p>我们以如下方式构造网络图：</p><ul><li>从超级源点出发，向每个黑色格子连一条容量为 $1$ 的边</li><li>从每个白色格子出发，向超级汇点连一条容量为 $1$ 的边</li><li>从每个黑色格子出发，向与其相邻的每个白色格子连一条容量为 $1$ 的边</li></ul><p>在此网络图上采用 Dinic 算法跑最大流，即为二分图的最大匹配，由于约有 $nm$ 个节点和 $2nm$ 条边，时间复杂度为 $O(m^{\frac{3}{2}}n^{\frac{3}{2}})$（实际上根本跑不满）</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>由于存在多组测试数据，每次要清空<code>head</code>数组和<code>broken</code>数组，并重置原点和汇点的标号</li><li>每次<code>total</code>要重置且初始值为 $1$（老生常谈）</li><li>数组大小至少为 $32\times 32+2=1026$，我起初开到 $1025$ 发生了一些不可预知的 TLE（悲）</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> NMAX = <span class="number">1035</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;, dy[<span class="number">5</span>] = &#123;<span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T result = <span class="built_in">T</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">bool</span> sign = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">char</span> word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">isdigit</span>(word))</span><br><span class="line">        sign |= (word == <span class="string">&#x27;-&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">isdigit</span>(word))</span><br><span class="line">        result = result * <span class="number">10</span> + <span class="built_in">T</span>(word - <span class="string">&#x27;0&#x27;</span>), word = <span class="built_in">getchar</span>();</span><br><span class="line">    value = sign ? -result : result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Ts&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">read</span><span class="params">(T &amp;value, Ts &amp;...remain)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(value);</span><br><span class="line">    <span class="built_in">read</span>(remain...);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> t, w, n;</span><br><span class="line">    <span class="built_in">Edge</span>(<span class="type">int</span> <span class="type">_t</span> = <span class="number">0</span>, <span class="type">int</span> _w = <span class="number">0</span>, <span class="type">int</span> _n = <span class="number">0</span>) : <span class="built_in">t</span>(<span class="type">_t</span>), <span class="built_in">w</span>(_w), <span class="built_in">n</span>(_n) &#123;&#125;</span><br><span class="line">&#125; edge[NMAX &lt;&lt; <span class="number">3</span>];</span><br><span class="line"><span class="type">int</span> head[NMAX], start[NMAX], depth[NMAX], T, n, m, k, s, t, total;</span><br><span class="line"><span class="type">bool</span> broken[<span class="number">35</span>][<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    edge[++total] = <span class="built_in">Edge</span>(v, w, head[u]);</span><br><span class="line">    head[u] = total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(depth, <span class="number">0</span>, <span class="built_in">sizeof</span>(depth)), <span class="built_in">memcpy</span>(start, head, <span class="built_in">sizeof</span>(head));</span><br><span class="line">    std::queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    q.<span class="built_in">push</span>(s), depth[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>();</span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = head[u]; i; i = edge[i].n)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> v = edge[i].t;</span><br><span class="line">            <span class="keyword">if</span> (edge[i].w &amp;&amp; !depth[v])</span><br><span class="line">                depth[v] = depth[u] + <span class="number">1</span>, q.<span class="built_in">push</span>(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth[t];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t || !a)</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    <span class="type">int</span> f, r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> &amp;i = start[u]; i; i = edge[i].n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v = edge[i].t;</span><br><span class="line">        <span class="keyword">if</span> (edge[i].w &amp;&amp; depth[v] == depth[u] + <span class="number">1</span> &amp;&amp; (f = <span class="built_in">dfs</span>(v, std::<span class="built_in">min</span>(a, edge[i].w))))</span><br><span class="line">        &#123;</span><br><span class="line">            r += f, a -= f;</span><br><span class="line">            edge[i].w -= f, edge[i ^ <span class="number">1</span>].w += f;</span><br><span class="line">            <span class="keyword">if</span> (!a)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dinic</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> flow = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">bfs</span>())</span><br><span class="line">        flow += <span class="built_in">dfs</span>(s, INF);</span><br><span class="line">    <span class="keyword">return</span> flow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(head, <span class="number">0</span>, <span class="built_in">sizeof</span>(head)), <span class="built_in">memset</span>(broken, <span class="number">0</span>, <span class="built_in">sizeof</span>(broken));</span><br><span class="line">    <span class="built_in">read</span>(n, m, k), s = <span class="number">0</span>, t = n * m + <span class="number">1</span>, total = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>, x, y; i &lt;= k; i++)</span><br><span class="line">        <span class="built_in">read</span>(x, y), broken[x][y] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (broken[i][j])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">int</span> p = (i - <span class="number">1</span>) * m + j;</span><br><span class="line">            <span class="keyword">if</span> ((i + j) &amp; <span class="number">1</span>)</span><br><span class="line">                <span class="built_in">insert</span>(p, t, <span class="number">1</span>), <span class="built_in">insert</span>(t, p, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">insert</span>(s, p, <span class="number">1</span>), <span class="built_in">insert</span>(p, s, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> _k = <span class="number">0</span>; _k &lt; <span class="number">4</span>; _k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> _i = i + dx[_k], _j = j + dy[_k];</span><br><span class="line">                    <span class="keyword">if</span> (_i &lt; <span class="number">1</span> || _i &gt; n || _j &lt; <span class="number">1</span> || _j &gt; m || broken[_i][_j])</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    <span class="type">int</span> _p = (_i - <span class="number">1</span>) * m + _j;</span><br><span class="line">                    <span class="built_in">insert</span>(p, _p, <span class="number">1</span>), <span class="built_in">insert</span>(_p, p, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">read</span>(T);</span><br><span class="line">    <span class="keyword">while</span> (T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">construct</span>();</span><br><span class="line">        <span class="type">int</span> flow = <span class="built_in">dinic</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, (<span class="number">2</span> * flow == n * m - k) ? <span class="string">&quot;YES&quot;</span> : <span class="string">&quot;NO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>【文章】我的大一生活</title>
    <link href="https://xxyqwq.github.io/2022/08/29/freshman-life/"/>
    <id>https://xxyqwq.github.io/2022/08/29/freshman-life/</id>
    <published>2022-08-29T11:37:29.000Z</published>
    <updated>2022-08-29T16:14:17.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="入学前的暑假"><a href="#入学前的暑假" class="headerlink" title="入学前的暑假"></a>入学前的暑假</h2><p>高考结束后，大家各自奔赴，享受生活。年级里留下约二十人备战强基。</p><p>蹲在教室自习实在是闲不住，我买了一本同济高数自学。这些高数知识看似复杂，实际上并没有很大的思维难度。同济教材的编写逻辑有一种离散的美，索性囫囵吞枣，面向习题学习。所幸配套教辅很不错，扫一遍知识点就可以开始做题。习题大多很简单，偶尔有不会写的就看一眼答案，写完习题知识点也就比较熟练了。</p><p>高考出分，比我预期的好很多，既然大家都考得不好，心里顿时平衡了。THU强基笔试，数学77/100，物化25/100，由于没有评级，作文60/200，直接滚蛋。（THU强基一如既往地黑，没有评级就别去陪跑，不如报PKU强基/享受生活）现在回想起来，强基没过也未必是一件坏事。如果不学数学和信息类专业，我大学以前积攒的所有优势就在顷刻间湮灭了，若是在天坑中摸爬滚打，前途尚未可知，那未来才是暗无天日。</p><p>疫情让我放弃了出游计划，遂闷在家里吃喝玩乐看高数，另给学妹辅导了高三数学，备课教学实在是很有意思的一件事。暑假均摊地看完了高数，心想大学数学不过如此，后来了解到培养计划里是数分，这下成小丑了。（也不能说完全白学，毕竟刷完了两册习题）</p><p>21级交大的军训改在了入学的暑假，于是早早地去报到了。</p><h2 id="致远工科"><a href="#致远工科" class="headerlink" title="致远工科"></a>致远工科</h2><p>入学前，我对交大政策的了解相当匮乏，甚至不知道致远学院的存在。致远工科是在志愿填报的时候签约的，于是填表、面谈，走完流程就莫名其妙地进了。开学前，我听了某新生群的讲座，又刷了很多知乎，才了解到前两年的致远工科在网络上差评如潮。一度想要跑路，最后为了5000的低保抱着试试看的心态留了下来。</p><p>第一学期，致远工科把我的数分、线代、离散都换成了荣誉课，课程难度确实有所加深，更重要的是能感受到身边高手如云，这些同学的刻苦和专注都令我倍感压力。因为这些特殊安排，我大多数的课程并不和本专业的同学一起上，这潜移默化地影响着我的社交范围。</p><p>即使在交大内部，对于致远工科的评价也是毁誉参半，细致的讨论和评述已经不在本文的范围之内。</p><h2 id="数分选拔考"><a href="#数分选拔考" class="headerlink" title="数分选拔考"></a>数分选拔考</h2><p>学期刚开始的几周，我过得相当轻松。C++和离散对我而言并没有什么难度，唯独需要花费精力的就是数分和线代。而老师只会在课后留少量的习题，这些任务很快就可以完成，之后便可以随意摸鱼了。此时，我对大学的考试并没有什么概念，自然也不会产生忧虑。</p><p>对于致远工科的同学而言，数分选拔考并不产生选拔作用，只是老师强制要求参加的一次检测。大概由于是选拔性考试，题目难度偏高，我只考了78/100。虽然只是一次无关紧要的考试，这个分数依旧震撼了我。老师告诉我们，选拔进入荣誉课的分数线是70左右，而我所在教学班的均分不到50。这表明很多致远工科的同学其实并不具备足够的实力（至少在考试排名上）学习荣誉课。当然，也有不少大佬80+甚至90+的分数震撼着我。</p><p>数分选拔考提醒我，仅仅完成老师布置的习题只能混个及格，想要一个不错的分数还需要更多的努力。后来我刷了一些吉米多维奇，但是题量太大劝退，遂改变策略，把教材每一节的习题写完（交大版数分的习题其实并不多），也取得了不错的成绩，小测100/100，期中97/100，期末100/100。当然，这个分数完全不能体现真正的分析功底，只能说掌握了基本的知识和套路。</p><h2 id="图书馆"><a href="#图书馆" class="headerlink" title="图书馆"></a>图书馆</h2><p>图书馆是一个学习效率很高的地方，因此我常常去图书馆写作业。起初我喜欢去主图，因为主图很近，我很懒。我还记得开学第一天去图书馆，坐在我对面的是一个很可爱的女生，她在看陈纪修的《数学分析》，旁边的女生看的是交大版的《线性代数》，于是我立刻猜出了她们的专业，后来我果然在荣誉课上看到了其中一个女生。之后来主图也偶尔能看见熟悉的面孔。这就是致远吧，我如是对自己说。后来我发现，包图的设施更加完善，光线也明亮一些，也难怪包图的生意如此火爆。每次去包图，我都能看到不少致远的同学，其中有一些应该是图书馆的常客。（因为每次都能看见他们）</p><p>我观察到，去图书馆的频率能够反映我的学习状态。开始几周，我几乎每天都会去，毕竟怀着一腔热血进入交大，自然会想着好好努力。然而过了五六周以后，我开始看剧，先是火爆一时的《鱿鱼游戏》，接着去补《权力的游戏》，然后是各种国产剧，往往一看就是一整天。这样的生活节奏渐渐冲淡了学习的热情，于是变得懒散而颓废了。直到十二周左右，我心血来潮和室友Y去包图自习，久违的高效的学习状态重新唤醒了我，一段浑浑噩噩的日子才算结束。</p><h2 id="考试周"><a href="#考试周" class="headerlink" title="考试周"></a>考试周</h2><p>大一上我对期末考试还是很重视的，提前两周就开始搜集复习材料和备考。从结果来看复习效果是不错的，但是过程上有很多无用功。比如花了不少时间复习思修和军理，事实上思修只需要把试卷填满，军理照着隔壁老师的重点半小时就可以复习完。印象比较深的是考数分前，我花了一天把范围内的书后习题全刷了一遍，现在回过头看，不禁感慨当时的效率奇高。（可能是包图有buff加成？）</p><p>考试的时候也是不紧不慢，有些题量很小的考试我都是考场里最后写完的。最大程度地利用时间，在一定程度上减少了犯错丢分的可能性。多数考试都是成竹在胸的感觉，除了大英（完全不会）和线代（战战兢兢）。有些课程出分很慢，但是结果还可以，数分、线代、离散、程设都满绩了也没什么遗憾。</p><h2 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h2><p>大一上的寒假是极其短暂的，因为此前校历两次莫名其妙的改动，寒假从6周缩水成4周，算上往返掐头去尾只剩三周了。回家之前我买了基电和数据结构的教材，到家先颓废了几天，之后每天看几页书。数据结构比较简单，一周速通，顺便发现教材代码一堆错误，怀疑有些代码根本没跑过。过完春节，一天一章看完了大物第一册，然后寒假就基本结束了，基电看了几页一窍不通，数分也没来得及看（寄）。</p><p>末了参加了高中同学的聚餐，遂匆匆返校。</p><h2 id="自律的前四周"><a href="#自律的前四周" class="headerlink" title="自律的前四周"></a>自律的前四周</h2><p>发现一件怪事，每个学期开始的一段时间总会特别来劲。我计划在平时完成数分的所有书后习题，并且刷完基电辅导书。我发现这样做会搞得自己很忙，但还是坚持下来了，毕竟不刷点题这课属实是学不明白。</p><p>另一方面，大一下的课表比较阴间，集中体现在课程的时间分布不均匀，周三周四只有两节课，但是单周的周一可以撑满早八到晚九，想吃顿饭都赶不上。无奈我个人不能接受翘课，坚持每节课都认真上完。勤奋的日子在事后都显得模糊，只记得这四周仿佛是一晃而过。</p><h2 id="封校"><a href="#封校" class="headerlink" title="封校"></a>封校</h2><p>2022年3月9日是我难以忘却的第十九个生日，我在室友的叫唤中惊醒。我本已盘算了一周如何度过这个生日，或许请室友吃一顿吉姆丽德，也或许打一场酣畅淋漓的篮球赛，然而这些都随着封楼烟消云散了。学校的行动一如既往地悄无声息，当你想逃跑时已经太晚了，于是我们开始了长达一个半月的隔离生活，以及至今未能结束的网课生活。</p><p>最为难熬的应该是封楼之初的那几天，由于事发突然，后勤措施并不能准时到位，吃饭计划也要推迟几个小时。为了防止交叉感染，浴室也关闭了，这一周始终无法洗澡，只得任由自己在寝室里发臭。情况在3月15日有了变化，深夜里老师通知我们全员转运，在凌晨两点我住进了南洋北苑。南洋北苑是闲置的留学生公寓，单人间，独立卫浴。没想到因为疫情在上海体验了一次高档待遇，一番折腾之后我终于在凌晨四点入睡。两周之后，我们又被转运到汉庭酒店进行一周的健康管理，酒店的条件自然是不差，然而缺少适合学习的桌椅，只能躺在床上听网课，另外酒店的床过于柔软令我难以适应。住了一周汉庭酒店，最大的收获是凭借交大邮箱成为了尊贵的华住会铂金会员。</p><p>封校期间，网络成为了与外界沟通的唯一途径。我看到了太多，也明白了太多。形形色色的新闻和消息不断刷新我的世界观，以至于我开始麻木了，或许整个世界也在逐渐麻木。直至现在，无论多么离谱的消息，抑或是谣言出现在网络上，大家也并不觉得离谱，从而便轻易地相信了。永远不要指望所有人都有兼济天下的宽阔胸襟和修齐治平的崇高理想，唯有明哲保身才是第一要务。</p><h2 id="谈谈网课"><a href="#谈谈网课" class="headerlink" title="谈谈网课"></a>谈谈网课</h2><p>线上教学似乎有一种神奇的魔力，让所有人都失去学习的热情。从上网课开始，我身边很多人便彻底开摆了，我自己的学习效率也难免有所降低。</p><p>线下授课模式改为线上，彻底改变了一些课程的授课节奏。以数学分析课程为例，陈克应老师的教学无疑是一流的，板书清晰，节奏适中。由于腾讯会议的共享功能和屏幕大小的限制，只能通过纸上手写和PPT展示授课，这种方式令学生不得不在听课时反复切换界面，大大降低了听课效率。同时，没有了教室内的同学和环境，课堂的氛围感也大打折扣。主客观原因的共同作用下，我时常感到昏昏欲睡，只能挣扎着听完整节课。</p><p>封控的另一弊端体现在生活上。隔离使我只能在一块狭小的空间活动，阻断了所有户外锻炼。身体素质的下降直接导致活力的下降，于是做任何事都会缺乏斗志。学习不是关在屋子里闭门造车就能成功的，它还需要一些其他的活动补充动力，形成良性循环。</p><p>对于自制力差的群体，网课更为致命。没有了严格的时间约束和无形的集体压力，原本鞭策学习的客观因素全然消失，保持勤奋刻苦的状态简直是一种奢求了。</p><h2 id="期末"><a href="#期末" class="headerlink" title="期末"></a>期末</h2><p>临近期末无疑是一件非常痛苦的事情。十五周前后，所有的任务压力潮涌而来。且不论各门课程最后几章难度的提升，光是平时作业和大作业就可以压得我喘不过气。星火培训班也在周末开展培训和小组学习，把时间挤压殆尽。一想到期末考试即将来临，难免有一种黑云压城暗无天日的恐惧感。在那段日子里，我从早到晚都对着电脑写大作业和论文，时常熬到凌晨。在缺乏锻炼的情况下，我的身体耐力几乎到达了极限，所幸最后还是坚持下来。</p><p>我意识到，总有些时候会面临繁重的任务，被巨大的任务量压得喘不过气。而完成它们恰恰是没有捷径的。无法承受者或是自暴自弃，或是情绪崩溃，落得大败而归的结局。我的毅力和决心，正是在一次次磨砺中成长的。对于持久性的任务，不必苛求当日解决，也不必事事苛求完美，知天命尽人事即可。</p><p>考试周，我和室友Y相约每天去东下院自习。譬如数据结构这类课程比较简单，我便直接刷历年的期末真题了事。细细想来，工巧的算法被压缩成无趣的试题，深邃的思想被考成死记硬背的文科题，实在令人遗憾和痛心。而譬如数学分析、电路理论这样的硬骨头，我便大量地刷题，提高熟练度的同时精准查漏补缺，最后留下一些时间刷真题。我深知这学期的学习属实是一种敷衍，老师们大概也知道，因此我的考试成绩竟还说得过去。大物、电路、数电、数据结构都满绩了，唯独遗憾最有把握的数分翻了车，就当是为自己复习时的自以为是付出了代价。</p><p>我想，所谓的努力学习，追求的是高效率和高收益，而不是为了努力本身。盯着书本埋头苦学一整天，有时候还不如出门散散心，再专注地学上几个小时。保持一种轻松愉悦的心态，更容易专注于学习，亦不会因为密集的考试而倍感焦虑。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>高中的班主任曾说：别以为上了大学就轻松了。如今上了大学，深以为然。大一的忙碌远远超出了我的预期，好像一场快节奏的梦。当我以平静的眼光回顾这一年，我庆幸自己尚未迷失。这一年有诸多遗憾，没能多去校外走一走，甚至没能过上一个像样的大学生活，但这些都是琐碎的小事了。人生不如意十之八九，我想我可以算作幸运的。也与读者共勉，不负大学时光。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;入学前的暑假&quot;&gt;&lt;a href=&quot;#入学前的暑假&quot; class=&quot;headerlink&quot; title=&quot;入学前的暑假&quot;&gt;&lt;/a&gt;入学前的暑假&lt;/h2&gt;&lt;p&gt;高考结束后，大家各自奔赴，享受生活。年级里留下约二十人备战强基。&lt;/p&gt;
&lt;p&gt;蹲在教室自习实在是闲不住，我</summary>
      
    
    
    
    <category term="文章" scheme="https://xxyqwq.github.io/categories/%E6%96%87%E7%AB%A0/"/>
    
    
    <category term="总结" scheme="https://xxyqwq.github.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>【题解】ACMOJ 1485 单调栈</title>
    <link href="https://xxyqwq.github.io/2022/08/29/acmoj-1485/"/>
    <id>https://xxyqwq.github.io/2022/08/29/acmoj-1485/</id>
    <published>2022-08-29T07:41:55.000Z</published>
    <updated>2022-08-29T15:27:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p><a href="https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_id=1485">ACMOJ - 1485 - 纯真丁一郎</a></p><p>给出一列 $n$ 个<strong>互不相同</strong>的数字 $a_1,a_2,\dots ,a_n$，定义一对 $i,j$ 满足性质当且仅当 $a_i,a_j$ 大于它们之间的所有数字 $a_{i+1},a_{i+2},\dots ,a_{j-1}$</p><p><strong>子问题1</strong>：试求满足性质的数对总数</p><p><strong>子问题2</strong>：给出 $m$ 次询问，每次限定 $i$ 范围为 $[l,r]$，但 $j$ 不限，求此时满足性质的数对总数</p><h3 id="时间复杂度要求"><a href="#时间复杂度要求" class="headerlink" title="时间复杂度要求"></a>时间复杂度要求</h3><p>虽然 $n,m\leq 10^6$ ，但要求实现 $O(n+m)$ 的算法</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>时间复杂度要求已经明示线性解法了，我们大胆猜测本题正解是<strong>单调队列/单调栈</strong></p><p>线性复杂度表明，对于每次询问我们要实现 $O(1)$ 查询，那么方案数一定满足<strong>可加性</strong>，所以要想办法求出：对于每个取定的位置 $i$ ，有多少相应的 $j\in[1,n]$ ，使得 $i,j$ 满足性质（记为 $v[i]$)</p><p>现在考虑 $v[i]$ 数组的求解，我们不妨先考虑 $a_i$ 的左侧，$a_1,a_2,\dots ,a_{i-1}$ 中哪些数与 $a_i$ 满足性质，不难发现以下<strong>特征</strong>：</p><ul><li>$a_i$ 以左第一个比它大的数 $a_p$ 会“<strong>遮挡</strong>”住所有 $a_p$ 左侧的数，即 $a_1,a_2,\dots ,a_{p-1}$ 不会对方案数产生贡献</li><li>若 $a_i$ 左侧两数 $a_m,a_n$ 满足 $m&lt;n$ 且 $a_m&lt;a_n$，则 $a_n$ 会“<strong>遮挡</strong>”住 $a_m$，换言之，对于单调增加的子列 $a_s,a_{s+1},\dots ,a_t$，只有最右边的 $a_t$ 产生贡献</li></ul><p>以上两个特征对于问题求解的简化至关重要，它告诉我们计算 $v[i]$ 时，不考虑：</p><ul><li>“<strong>过大</strong>”的数，即 $a_p$ 以左的数</li><li>“<strong>过小</strong>”的数，即已经被自身右侧其他数“遮挡”的数</li></ul><p>于是我们只需要维护一个<strong>单调栈</strong>，它满足从栈底到栈顶的元素<strong>单调递减</strong>，算法流程如下：</p><ul><li>让 $i$ 遍历 $1,2,\dots ,n$</li><li>把栈顶部所有小于 $a[i]$ 的数全部弹出，每弹出一个数，$v[i]+1$ （这些数都会产生贡献)</li><li>如果栈仍然非空，贡献再 $+1$（左侧第一个大于 $a[i]$ 的元素也会产生贡献）</li><li>将 $a[i]$ 压入栈中</li></ul><p>完成上述算法后，$v[i]$ 中已经得到了 $a_i$ 左侧能与之满足性质的匹配数</p><p>对于右侧，我们从右至左，完全对称地执行上述算法，即可得到相应的匹配数</p><p>正确求解 $v[i]$ 数组后，我们计算其前缀和 $r[i]$，对于每次询问 $x,y$ ，答案即为 $\sum \limits _{k=x}^y v[k]=r[y]-r[x-1]$，即可实现 $O(1)$ 查询</p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ol><li>题目允许 $i=j$ ，因此 $a_i$ 与<strong>自身</strong>的匹配也要计算一次贡献</li><li>前缀和数组类型应当为<code>long long</code>，避免求和时溢出<code>int</code>范围</li><li>完成左侧方案数的计算后应当将栈清空</li><li>对栈操作时刻注意<strong>判空</strong></li><li>请学会高效的读入方式，<code>cin</code>容易直接超时</li></ol><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>为什么上述算法流程包含两重循环，但复杂度是 $O(n)$ 呢？</p><p>我们注意到对于每个 $a_i$，<strong>至多</strong>只会发生一次入栈，一次出栈，因此第二重循环的操作次数上限为 $2n$，请读者仔细体会</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> SIZE = <span class="number">1000005</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- 以下为链表栈的实现，可以忽略 ----------</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Stack</span>() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">pop</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">clear</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedStack</span> : <span class="keyword">public</span> Stack&lt;ElementType&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">StackNode</span></span><br><span class="line">    &#123;</span><br><span class="line">        ElementType data;</span><br><span class="line">        StackNode *next;</span><br><span class="line">        <span class="built_in">StackNode</span>() : <span class="built_in">next</span>(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">        <span class="built_in">StackNode</span>(<span class="type">const</span> ElementType &amp;_data, StackNode *_next = <span class="literal">nullptr</span>) : <span class="built_in">data</span>(_data), <span class="built_in">next</span>(_next) &#123;&#125;</span><br><span class="line">        ~<span class="built_in">StackNode</span>() &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    StackNode *head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">LinkedStack</span>();</span><br><span class="line">    ~<span class="built_in">LinkedStack</span>();</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">empty</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push</span><span class="params">(<span class="type">const</span> ElementType &amp;element)</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">ElementType <span class="title">top</span><span class="params">()</span> <span class="type">const</span></span>;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">LinkedStack&lt;ElementType&gt;::~<span class="built_in">LinkedStack</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">bool</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">empty</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> head == <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">push</span>(<span class="type">const</span> ElementType &amp;element)</span><br><span class="line">&#123;</span><br><span class="line">    head = <span class="keyword">new</span> <span class="built_in">StackNode</span>(element, head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">pop</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> Stack is already empty!;</span><br><span class="line">    StackNode *temp = head;</span><br><span class="line">    ElementType value = temp-&gt;data;</span><br><span class="line">    head = head-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> temp;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line">ElementType LinkedStack&lt;ElementType&gt;::<span class="built_in">top</span>() <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">throw</span> Stack is already empty!;</span><br><span class="line">    <span class="keyword">return</span> head-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> ElementType&gt;</span><br><span class="line"><span class="type">void</span> LinkedStack&lt;ElementType&gt;::<span class="built_in">clear</span>()</span><br><span class="line">&#123;</span><br><span class="line">    StackNode *temp;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">nullptr</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = head;</span><br><span class="line">        head = head-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ---------- 以上为链表栈的实现，可以忽略 ----------</span></span><br><span class="line"></span><br><span class="line">LinkedStack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> r[SIZE]; <span class="comment">// Notice the summary can exceed range of int</span></span><br><span class="line"><span class="type">int</span> v[SIZE], h[SIZE], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(%d%d, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        v[i] = <span class="number">1</span>; <span class="comment">// Stand at the same position</span></span><br><span class="line">        <span class="built_in">scanf</span>(%d, &amp;h[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    s.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) <span class="comment">// Count on the left side</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; h[s.<span class="built_in">top</span>()] &lt; h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            v[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            v[i]++;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!s.<span class="built_in">empty</span>()) <span class="comment">// Clear stack for next direction</span></span><br><span class="line">        s.<span class="built_in">pop</span>();</span><br><span class="line">    s.<span class="built_in">push</span>(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i; i--) <span class="comment">// Count on the right side</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (!s.<span class="built_in">empty</span>() &amp;&amp; h[s.<span class="built_in">top</span>()] &lt; h[i])</span><br><span class="line">        &#123;</span><br><span class="line">            s.<span class="built_in">pop</span>();</span><br><span class="line">            v[i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!s.<span class="built_in">empty</span>())</span><br><span class="line">            v[i]++;</span><br><span class="line">        s.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="comment">// Calculate prefix summary to accelerate</span></span><br><span class="line">        r[i] = r[i - <span class="number">1</span>] + v[i];</span><br><span class="line">    <span class="built_in">printf</span>(%lld\n, r[n]); <span class="comment">// r[n] is the total summary</span></span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(%d%d, &amp;x, &amp;y);</span><br><span class="line">        <span class="built_in">printf</span>(%lld\n, r[y] - r[x - <span class="number">1</span>]); <span class="comment">// Summary from v[x] to v[y] is r[y] - r[x - 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://acm.sjtu.edu.cn/OnlineJudge/problem?problem_i</summary>
      
    
    
    
    <category term="题解" scheme="https://xxyqwq.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="算法" scheme="https://xxyqwq.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
